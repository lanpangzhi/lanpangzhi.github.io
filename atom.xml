<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蓝胖纸</title>
  
  <subtitle>哆啦A梦</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.langpz.com/"/>
  <updated>2025-09-06T12:42:50.049Z</updated>
  <id>http://blog.langpz.com/</id>
  
  <author>
    <name>lanpangzhi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS设计模式-工厂模式</title>
    <link href="http://blog.langpz.com/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html"/>
    <id>http://blog.langpz.com/JS设计模式-工厂模式.html</id>
    <published>2025-08-30T14:58:36.000Z</published>
    <updated>2025-09-06T12:42:50.049Z</updated>
    
    <content type="html"><![CDATA[<p>工厂模式是一种创建型设计模式，它提供了一种创建对象的优雅方式。将对象的创建与使用分离。我们在创建对象时不会对客户端暴露创建逻辑，客户端只需要知道如何使用对象即可。<br><a id="more"></a></p><h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><p>简单工厂模式是一种创建型设计模式，它根据参数的不同返回不同类的实例。简单工厂模式的工厂类负责创建所有的实例。<br>例如便利店，你告诉店员想要什么（比如一瓶可乐或一包薯片），店员直接从货架上拿给你，不需要知道商品是如何生产的。<br></p><div class="highlight-wrap" data-rel="Typescript"><figure class="lpz highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单工厂：集中式对象创建</span></span><br><span class="line"><span class="keyword">class</span> SimpleFactory &#123;</span><br><span class="line">    <span class="comment">// 静态工厂方法，直接通过类调用</span></span><br><span class="line">    <span class="keyword">static</span> createProduct(<span class="keyword">type</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span>(<span class="keyword">type</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'cola'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Cola();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'crisps'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Crisps();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'没有这种商品'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 产品类</span></span><br><span class="line"><span class="keyword">class</span> Cola &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">'可乐'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    info() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Crisps &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">'薯片'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    info() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="keyword">const</span> cola = SimpleFactory.createProduct(<span class="string">'cola'</span>);</span><br><span class="line"><span class="keyword">const</span> crisps = SimpleFactory.createProduct(<span class="string">'crisps'</span>);</span><br><span class="line">cola.info();  <span class="comment">// 输出：可乐</span></span><br><span class="line">crisps.info(); <span class="comment">// 输出：薯片</span></span><br></pre></td></tr></table></figure></div><p></p><h1 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h1><p>工厂方法模式定义了一个创建对象的接口，父类定义创建接口，子类负责具体实现，新增产品类型只需添加新的子类，无需改动现有代码。<br>就像不同的专业工厂，每个工厂只专注做一类产品。<br></p><div class="highlight-wrap" data-rel="Scala"><figure class="lpz highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    createCar() &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">Error</span>('子类必须实现createCar方法');</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 奔驰工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BenzFactory</span> <span class="keyword">extends</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    createCar(model) &#123;</span><br><span class="line">        console.log('使用德国工艺标准生产');</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BenzCar</span>(model);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 宝马工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BMWFactory</span> <span class="keyword">extends</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    createCar(model) &#123;</span><br><span class="line">        console.log('使用巴伐利亚工艺标准生产');</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BMWCar</span>(model);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 汽车类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    constructor(brand, model) &#123;</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line">        <span class="keyword">this</span>.model = model;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BenzCar</span> <span class="keyword">extends</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    constructor(model) &#123;</span><br><span class="line">        <span class="keyword">super</span>('奔驰', model);</span><br><span class="line">        console.log(`生产了一辆$&#123;<span class="keyword">this</span>.brand&#125; $&#123;<span class="keyword">this</span>.model&#125;`);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BMWCar</span> <span class="keyword">extends</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    constructor(model) &#123;</span><br><span class="line">        <span class="keyword">super</span>('宝马', model);</span><br><span class="line">        console.log(`生产了一辆$&#123;<span class="keyword">this</span>.brand&#125; $&#123;<span class="keyword">this</span>.model&#125;`);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line">const benzFactory = <span class="keyword">new</span> <span class="type">BenzFactory</span>();</span><br><span class="line">const benzCar = benzFactory.createCar(<span class="symbol">'S</span>级'); </span><br><span class="line"><span class="comment">// 输出：使用德国工艺标准生产</span></span><br><span class="line"><span class="comment">//      生产了一辆奔驰 S级</span></span><br><span class="line"></span><br><span class="line">const bmwFactory = <span class="keyword">new</span> <span class="type">BMWFactory</span>();</span><br><span class="line">const bmwCar = bmwFactory.createCar(<span class="symbol">'X</span>1');</span><br><span class="line"><span class="comment">// 输出：使用巴伐利亚工艺标准生产</span></span><br><span class="line"><span class="comment">//      生产了一辆宝马 X1</span></span><br></pre></td></tr></table></figure></div><p></p><h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><p>抽象工厂模式提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。它强调产品之间的兼容性，确保创建的对象能够协同工作。<br>抽象工厂就像智能家居生态系统（如小米、苹果），每个生态系统提供一系列兼容的产品（手机、手表、耳机），这些产品专门设计为能无缝协作。<br></p><div class="highlight-wrap" data-rel="Scala"><figure class="lpz highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象工厂：声明创建一系列相关产品的接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    createPhone() &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">Error</span>('必须实现createPhone方法');</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    createWatch() &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">Error</span>('必须实现createWatch方法');</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    createEarphones() &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">Error</span>('必须实现createEarphones方法');</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂1：小米生态系统</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaomiFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    createPhone() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">XiaomiPhone</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    createWatch() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">XiaomiWatch</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    createEarphones() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">XiaomiEarphones</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂2：苹果生态系统</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppleFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    createPhone() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> iPhone();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    createWatch() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">AppleWatch</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    createEarphones() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">AirPods</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象产品接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    call() &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">Error</span>('必须实现call方法');</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 与同系列设备连接的方法</span></span><br><span class="line">    connectToWatch(watch) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">Error</span>('必须实现connectToWatch方法');</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watch</span> </span>&#123;</span><br><span class="line">    showTime() &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">Error</span>('必须实现showTime方法');</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Earphones</span> </span>&#123;</span><br><span class="line">    playSound() &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">Error</span>('必须实现playSound方法');</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaomiPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    call() &#123;</span><br><span class="line">        <span class="keyword">return</span> '小米手机打电话';</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    connectToWatch(watch) &#123;</span><br><span class="line">        <span class="keyword">if</span> (watch instanceof <span class="type">XiaomiWatch</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> '小米手机连接小米手表';</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> '小米手机连接失败：不兼容的设备';</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">iPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    call() &#123;</span><br><span class="line">        <span class="keyword">return</span> '苹果手机打电话';</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    connectToWatch(watch) &#123;</span><br><span class="line">        <span class="keyword">if</span> (watch instanceof <span class="type">AppleWatch</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> '苹果手机连接苹果手表';</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> '苹果手机连接失败：不兼容的设备';</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaomiWatch</span> <span class="keyword">extends</span> <span class="title">Watch</span> </span>&#123;</span><br><span class="line">    showTime() &#123;</span><br><span class="line">        <span class="keyword">return</span> '小米手表显示时间';</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppleWatch</span> <span class="keyword">extends</span> <span class="title">Watch</span> </span>&#123;</span><br><span class="line">    showTime() &#123;</span><br><span class="line">        <span class="keyword">return</span> '苹果手表显示时间';</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaomiEarphones</span> <span class="keyword">extends</span> <span class="title">Earphones</span> </span>&#123;</span><br><span class="line">    playSound() &#123;</span><br><span class="line">        <span class="keyword">return</span> '小米耳机播放声音';</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AirPods</span> <span class="keyword">extends</span> <span class="title">Earphones</span> </span>&#123;</span><br><span class="line">    playSound() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="symbol">'AirPods</span>播放声音';</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line">function createDeviceSuite(factory) &#123;</span><br><span class="line">    const phone = factory.createPhone();</span><br><span class="line">    const watch = factory.createWatch();</span><br><span class="line">    const earphones = factory.createEarphones();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        phone,</span><br><span class="line">        watch,</span><br><span class="line">        earphones,</span><br><span class="line">        testCompatibility() &#123;</span><br><span class="line">            <span class="keyword">return</span> phone.connectToWatch(watch);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line">const xiaomiSuite = createDeviceSuite(<span class="keyword">new</span> <span class="type">XiaomiFactory</span>());</span><br><span class="line">console.log(xiaomiSuite.testCompatibility()); <span class="comment">// 小米手机连接小米手表</span></span><br><span class="line"></span><br><span class="line">const appleSuite = createDeviceSuite(<span class="keyword">new</span> <span class="type">AppleFactory</span>());</span><br><span class="line">console.log(appleSuite.testCompatibility()); <span class="comment">// 苹果手机连接苹果手表</span></span><br></pre></td></tr></table></figure></div><p></p><h1 id="三种模式对比"><a href="#三种模式对比" class="headerlink" title="三种模式对比"></a>三种模式对比</h1><table><thead><tr><th>模式</th><th>特点</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>简单工厂</strong></td><td>一个工厂类负责所有产品创建</td><td>产品种类较少，创建逻辑简单</td></tr><tr><td><strong>工厂方法</strong></td><td>每个工厂类负责一种产品</td><td>产品种类较多，每种产品有独特的创建逻辑</td></tr><tr><td><strong>抽象工厂</strong></td><td>每个工厂创建一系列相关产品</td><td>需要创建一系列相关的产品族</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工厂模式是一种创建型设计模式，它提供了一种创建对象的优雅方式。将对象的创建与使用分离。我们在创建对象时不会对客户端暴露创建逻辑，客户端只需要知道如何使用对象即可。&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://blog.langpz.com/tags/javascript/"/>
    
      <category term="设计模式" scheme="http://blog.langpz.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="工厂模式" scheme="http://blog.langpz.com/tags/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JS设计模式-状态机模式</title>
    <link href="http://blog.langpz.com/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%9C%BA%E6%A8%A1%E5%BC%8F.html"/>
    <id>http://blog.langpz.com/JS设计模式-状态机模式.html</id>
    <published>2025-07-26T10:18:49.000Z</published>
    <updated>2025-09-06T12:42:50.049Z</updated>
    
    <content type="html"><![CDATA[<h1 id="状态机模式"><a href="#状态机模式" class="headerlink" title="状态机模式"></a>状态机模式</h1><p>状态机模式（State Pattern）是一种行为设计模式，它允许对象在内部状态改变时改变它的行为。简单来说，就像一个开关，不同的状态下会有不同的行为表现。<br><a id="more"></a><br>状态机由以下几个核心组件构成：</p><ul><li><strong>状态（State）</strong>：对象在某一时刻的特定条件或模式。</li><li><strong>事件（Event）</strong>：导致状态从一个状态转换到另一个状态的动作或触发器。</li><li><strong>转换（Transition）</strong>：从一个状态到另一个状态的改变，通常由事件触发，并且可能伴随某些动作。</li></ul><p>可以想象一下你的手机：</p><ul><li><strong>待机状态</strong>：屏幕黑屏，按电源键可以唤醒</li><li><strong>解锁状态</strong>：屏幕亮起，可以滑动解锁</li><li><strong>使用状态</strong>：可以打开应用、拨打电话等</li><li><strong>充电状态</strong>：显示充电图标，限制某些功能</li></ul><p>每个状态都有特定的行为，状态之间可以相互转换，这就是状态机的核心思想。</p><h2 id="为什么要使用状态机模式？"><a href="#为什么要使用状态机模式？" class="headerlink" title="为什么要使用状态机模式？"></a>为什么要使用状态机模式？</h2><h3 id="传统方式的问题"><a href="#传统方式的问题" class="headerlink" title="传统方式的问题"></a>传统方式的问题</h3><div class="highlight-wrap" data-rel="Javascript"><figure class="lpz highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统的if-else方式处理状态</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrafficLight</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'red'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  changeLight() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'red'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'green'</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'绿灯亮起，可以通行'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'green'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'yellow'</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'黄灯亮起，准备停车'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'yellow'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'red'</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'红灯亮起，禁止通行'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 如果要添加新状态或新行为，代码会变得越来越复杂</span></span><br><span class="line">  handleEmergency() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'red'</span>) &#123;</span><br><span class="line">      <span class="comment">// 红灯时的紧急处理</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'green'</span>) &#123;</span><br><span class="line">      <span class="comment">// 绿灯时的紧急处理</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'yellow'</span>) &#123;</span><br><span class="line">      <span class="comment">// 黄灯时的紧急处理</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="状态机模式的优势"><a href="#状态机模式的优势" class="headerlink" title="状态机模式的优势"></a>状态机模式的优势</h3><ol><li><strong>代码更清晰</strong>：每个状态的逻辑独立，易于理解</li><li><strong>易于扩展</strong>：添加新状态不影响现有代码</li><li><strong>减少bug</strong>：状态转换规则明确，避免非法状态</li><li><strong>便于维护</strong>：修改某个状态的行为只需修改对应的状态类</li></ol><h2 id="状态机模式的实现"><a href="#状态机模式的实现" class="headerlink" title="状态机模式的实现"></a>状态机模式的实现</h2><h3 id="基础实现"><a href="#基础实现" class="headerlink" title="基础实现"></a>基础实现</h3><div class="highlight-wrap" data-rel="Javascript"><figure class="lpz highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 状态接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">  handle(context) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'子类必须实现handle方法'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体状态类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedLight</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">  handle(context) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'红灯亮起，禁止通行'</span>);</span><br><span class="line">    context.setState(<span class="keyword">new</span> GreenLight());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GreenLight</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">  handle(context) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'绿灯亮起，可以通行'</span>);</span><br><span class="line">    context.setState(<span class="keyword">new</span> YellowLight());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YellowLight</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">  handle(context) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'黄灯亮起，准备停车'</span>);</span><br><span class="line">    context.setState(<span class="keyword">new</span> RedLight());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上下文类（状态机）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrafficLight</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="keyword">new</span> RedLight();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  setState(state) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = state;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  changeLight() &#123;</span><br><span class="line">    <span class="keyword">this</span>.state.handle(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> trafficLight = <span class="keyword">new</span> TrafficLight();</span><br><span class="line">trafficLight.changeLight(); <span class="comment">// 红灯亮起，禁止通行</span></span><br><span class="line">trafficLight.changeLight(); <span class="comment">// 绿灯亮起，可以通行</span></span><br><span class="line">trafficLight.changeLight(); <span class="comment">// 黄灯亮起，准备停车</span></span><br><span class="line">trafficLight.changeLight(); <span class="comment">// 红灯亮起，禁止通行</span></span><br></pre></td></tr></table></figure></div><h2 id="实际案例：音乐播放器"><a href="#实际案例：音乐播放器" class="headerlink" title="实际案例：音乐播放器"></a>实际案例：音乐播放器</h2><p>让我们用一个更贴近生活的例子——音乐播放器来演示状态机模式：</p><div class="highlight-wrap" data-rel="Javascript"><figure class="lpz highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 播放器状态基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PlayerState</span> </span>&#123;</span><br><span class="line">  play(player) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'子类必须实现play方法'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  pause(player) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'子类必须实现pause方法'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  stop(player) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'子类必须实现stop方法'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止状态</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StoppedState</span> <span class="keyword">extends</span> <span class="title">PlayerState</span> </span>&#123;</span><br><span class="line">  play(player) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'开始播放音乐 🎵'</span>);</span><br><span class="line">    player.setState(<span class="keyword">new</span> PlayingState());</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  pause(player) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'当前已停止，无法暂停'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  stop(player) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'当前已经是停止状态'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 播放状态</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PlayingState</span> <span class="keyword">extends</span> <span class="title">PlayerState</span> </span>&#123;</span><br><span class="line">  play(player) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'当前正在播放中'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  pause(player) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'暂停播放 ⏸️'</span>);</span><br><span class="line">    player.setState(<span class="keyword">new</span> PausedState());</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  stop(player) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'停止播放 ⏹️'</span>);</span><br><span class="line">    player.setState(<span class="keyword">new</span> StoppedState());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暂停状态</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PausedState</span> <span class="keyword">extends</span> <span class="title">PlayerState</span> </span>&#123;</span><br><span class="line">  play(player) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'继续播放 ▶️'</span>);</span><br><span class="line">    player.setState(<span class="keyword">new</span> PlayingState());</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  pause(player) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'当前已经是暂停状态'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  stop(player) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'停止播放 ⏹️'</span>);</span><br><span class="line">    player.setState(<span class="keyword">new</span> StoppedState());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 音乐播放器类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MusicPlayer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="keyword">new</span> StoppedState();</span><br><span class="line">    <span class="keyword">this</span>.currentSong = <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  setState(state) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = state;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  play() &#123;</span><br><span class="line">    <span class="keyword">this</span>.state.play(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  pause() &#123;</span><br><span class="line">    <span class="keyword">this</span>.state.pause(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  stop() &#123;</span><br><span class="line">    <span class="keyword">this</span>.state.stop(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  loadSong(song) &#123;</span><br><span class="line">    <span class="keyword">this</span>.currentSong = song;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`加载歌曲: <span class="subst">$&#123;song&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> player = <span class="keyword">new</span> MusicPlayer();</span><br><span class="line">player.loadSong(<span class="string">'陈奕迅 - 爱情转移'</span>);</span><br><span class="line"></span><br><span class="line">player.play();  <span class="comment">// 开始播放音乐 🎵</span></span><br><span class="line">player.play();  <span class="comment">// 当前正在播放中</span></span><br><span class="line">player.pause(); <span class="comment">// 暂停播放 ⏸️</span></span><br><span class="line">player.pause(); <span class="comment">// 当前已经是暂停状态</span></span><br><span class="line">player.play();  <span class="comment">// 继续播放 ▶️</span></span><br><span class="line">player.stop();  <span class="comment">// 停止播放 ⏹️</span></span><br><span class="line">player.pause(); <span class="comment">// 当前已停止，无法暂停</span></span><br></pre></td></tr></table></figure></div><h2 id="进阶案例：订单状态管理"><a href="#进阶案例：订单状态管理" class="headerlink" title="进阶案例：订单状态管理"></a>进阶案例：订单状态管理</h2><p>在电商系统中，订单状态管理是状态机模式的经典应用：</p><div class="highlight-wrap" data-rel="Javascript"><figure class="lpz highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 订单状态基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderState</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  pay(order) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`订单<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>状态下无法支付`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  ship(order) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`订单<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>状态下无法发货`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  receive(order) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`订单<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>状态下无法确认收货`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  cancel(order) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`订单<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>状态下无法取消`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 待支付状态</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PendingPaymentState</span> <span class="keyword">extends</span> <span class="title">OrderState</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">'待支付'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  pay(order) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'✅ 支付成功，订单进入待发货状态'</span>);</span><br><span class="line">    order.setState(<span class="keyword">new</span> PendingShipmentState());</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  cancel(order) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'❌ 订单已取消'</span>);</span><br><span class="line">    order.setState(<span class="keyword">new</span> CancelledState());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 待发货状态</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PendingShipmentState</span> <span class="keyword">extends</span> <span class="title">OrderState</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">'待发货'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  ship(order) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'🚚 订单已发货，进入待收货状态'</span>);</span><br><span class="line">    order.setState(<span class="keyword">new</span> ShippedState());</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  cancel(order) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'❌ 订单已取消，将退款处理'</span>);</span><br><span class="line">    order.setState(<span class="keyword">new</span> CancelledState());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 已发货状态</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippedState</span> <span class="keyword">extends</span> <span class="title">OrderState</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">'已发货'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  receive(order) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'📦 确认收货，订单完成'</span>);</span><br><span class="line">    order.setState(<span class="keyword">new</span> CompletedState());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 已完成状态</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CompletedState</span> <span class="keyword">extends</span> <span class="title">OrderState</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">'已完成'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 已取消状态</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CancelledState</span> <span class="keyword">extends</span> <span class="title">OrderState</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">'已取消'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订单类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(id, items) &#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">    <span class="keyword">this</span>.items = items;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="keyword">new</span> PendingPaymentState();</span><br><span class="line">    <span class="keyword">this</span>.createTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  setState(state) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`订单状态变更: <span class="subst">$&#123;<span class="keyword">this</span>.state.name&#125;</span> -&gt; <span class="subst">$&#123;state.name&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">this</span>.state = state;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  pay() &#123;</span><br><span class="line">    <span class="keyword">this</span>.state.pay(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  ship() &#123;</span><br><span class="line">    <span class="keyword">this</span>.state.ship(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  receive() &#123;</span><br><span class="line">    <span class="keyword">this</span>.state.receive(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  cancel() &#123;</span><br><span class="line">    <span class="keyword">this</span>.state.cancel(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  getStatus() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.state.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> order = <span class="keyword">new</span> Order(<span class="string">'ORD001'</span>, [<span class="string">'iPhone 15'</span>, <span class="string">'AirPods'</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`订单创建，当前状态: <span class="subst">$&#123;order.getStatus()&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">order.pay();     <span class="comment">// ✅ 支付成功，订单进入待发货状态</span></span><br><span class="line">order.ship();    <span class="comment">// 🚚 订单已发货，进入待收货状态</span></span><br><span class="line">order.receive(); <span class="comment">// 📦 确认收货，订单完成</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 演示错误操作</span></span><br><span class="line">order.pay();     <span class="comment">// 订单已完成状态下无法支付</span></span><br><span class="line">order.cancel();  <span class="comment">// 订单已完成状态下无法取消</span></span><br></pre></td></tr></table></figure></div><h2 id="使用状态机模式的最佳实践"><a href="#使用状态机模式的最佳实践" class="headerlink" title="使用状态机模式的最佳实践"></a>使用状态机模式的最佳实践</h2><h3 id="1-状态转换图"><a href="#1-状态转换图" class="headerlink" title="1. 状态转换图"></a>1. 状态转换图</h3><p>在实现状态机之前，先画出状态转换图：</p><div class="highlight-wrap" data-rel="Brainfuck"><figure class="lpz highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">待支付</span> <span class="literal">-</span><span class="literal">-</span><span class="title">[</span><span class="comment">支付</span><span class="title">]</span><span class="literal">-</span><span class="literal">-</span>&gt; <span class="comment">待发货</span> <span class="literal">-</span><span class="literal">-</span><span class="title">[</span><span class="comment">发货</span><span class="title">]</span><span class="literal">-</span><span class="literal">-</span>&gt; <span class="comment">已发货</span> <span class="literal">-</span><span class="literal">-</span><span class="title">[</span><span class="comment">确认收货</span><span class="title">]</span><span class="literal">-</span><span class="literal">-</span>&gt; <span class="comment">已完成</span></span><br><span class="line">   <span class="comment">|</span>                  <span class="comment">|</span>                              </span><br><span class="line">   <span class="comment">|</span>                  <span class="comment">|</span>                              </span><br><span class="line">   <span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="title">[</span><span class="comment">取消</span><span class="title">]</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="title">[</span><span class="comment">取消</span><span class="title">]</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>&gt; <span class="comment">已取消</span></span><br></pre></td></tr></table></figure></div><h3 id="2-状态验证"><a href="#2-状态验证" class="headerlink" title="2. 状态验证"></a>2. 状态验证</h3><div class="highlight-wrap" data-rel="Javascript"><figure class="lpz highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderStateMachine</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// 定义允许的状态转换</span></span><br><span class="line">    <span class="keyword">this</span>.transitions = &#123;</span><br><span class="line">      <span class="string">'pending_payment'</span>: [<span class="string">'paid'</span>, <span class="string">'cancelled'</span>],</span><br><span class="line">      <span class="string">'paid'</span>: [<span class="string">'shipped'</span>, <span class="string">'cancelled'</span>],</span><br><span class="line">      <span class="string">'shipped'</span>: [<span class="string">'delivered'</span>],</span><br><span class="line">      <span class="string">'delivered'</span>: [],</span><br><span class="line">      <span class="string">'cancelled'</span>: []</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  canTransition(fromState, toState) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.transitions[fromState]?.includes(toState) || <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  transition(order, toState) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.canTransition(order.currentState, toState)) &#123;</span><br><span class="line">      order.currentState = toState;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`状态转换成功: <span class="subst">$&#123;toState&#125;</span>`</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`非法状态转换: <span class="subst">$&#123;order.currentState&#125;</span> -&gt; <span class="subst">$&#123;toState&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="3-状态持久化"><a href="#3-状态持久化" class="headerlink" title="3. 状态持久化"></a>3. 状态持久化</h3><div class="highlight-wrap" data-rel="Javascript"><figure class="lpz highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersistentOrder</span> <span class="keyword">extends</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(id, items) &#123;</span><br><span class="line">    <span class="keyword">super</span>(id, items);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  setState(state) &#123;</span><br><span class="line">    <span class="keyword">super</span>.setState(state);</span><br><span class="line">    <span class="comment">// 保存状态到数据库</span></span><br><span class="line">    <span class="keyword">this</span>.saveToDatabase();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  saveToDatabase() &#123;</span><br><span class="line">    <span class="comment">// 模拟保存到数据库</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`保存订单 <span class="subst">$&#123;<span class="keyword">this</span>.id&#125;</span> 状态: <span class="subst">$&#123;<span class="keyword">this</span>.state.name&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> loadFromDatabase(id) &#123;</span><br><span class="line">    <span class="comment">// 模拟从数据库加载</span></span><br><span class="line">    <span class="keyword">const</span> orderData = &#123; id, <span class="attr">state</span>: <span class="string">'paid'</span>, <span class="attr">items</span>: [<span class="string">'商品1'</span>] &#125;;</span><br><span class="line">    <span class="keyword">const</span> order = <span class="keyword">new</span> PersistentOrder(orderData.id, orderData.items);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据保存的状态恢复对象状态</span></span><br><span class="line">    <span class="keyword">switch</span>(orderData.state) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'pending_payment'</span>:</span><br><span class="line">        order.state = <span class="keyword">new</span> PendingPaymentState();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'paid'</span>:</span><br><span class="line">        order.state = <span class="keyword">new</span> PendingShipmentState();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="comment">// ... 其他状态</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> order;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>状态机模式是一个非常实用的设计模式，特别适合以下场景：</p><ol><li><strong>对象行为依赖于状态</strong>：如播放器、订单、游戏角色等</li><li><strong>状态转换规则复杂</strong>：有多个状态和转换条件</li><li><strong>需要避免大量if-else</strong>：让代码更清晰易维护</li></ol><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>📝 <strong>代码清晰</strong>：每个状态的逻辑独立</li><li>🔧 <strong>易于扩展</strong>：添加新状态不影响现有代码</li><li>🐛 <strong>减少bug</strong>：状态转换规则明确</li><li>🔄 <strong>符合开闭原则</strong>：对扩展开放，对修改关闭</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>📈 <strong>增加类的数量</strong>：每个状态都需要一个类</li><li>🏗️ <strong>结构复杂</strong>：对于简单状态可能过度设计</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;状态机模式&quot;&gt;&lt;a href=&quot;#状态机模式&quot; class=&quot;headerlink&quot; title=&quot;状态机模式&quot;&gt;&lt;/a&gt;状态机模式&lt;/h1&gt;&lt;p&gt;状态机模式（State Pattern）是一种行为设计模式，它允许对象在内部状态改变时改变它的行为。简单来说，就像一个开关，不同的状态下会有不同的行为表现。&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://blog.langpz.com/tags/javascript/"/>
    
      <category term="设计模式" scheme="http://blog.langpz.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="状态机模式" scheme="http://blog.langpz.com/tags/%E7%8A%B6%E6%80%81%E6%9C%BA%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JS设计模式-适配器模式</title>
    <link href="http://blog.langpz.com/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.html"/>
    <id>http://blog.langpz.com/JS设计模式-适配器模式.html</id>
    <published>2025-06-28T16:18:49.000Z</published>
    <updated>2025-09-06T12:42:50.049Z</updated>
    
    <content type="html"><![CDATA[<p>适配器模式（Adapter Pattern）是一种结构型设计模式，它允许将一个类（或对象）的接口转换成客户端期望的另一个接口。适配器让那些由于接口不兼容而不能在一起工作的类可以协同工作。<br><a id="more"></a></p><h1 id="适配器模式使用场景"><a href="#适配器模式使用场景" class="headerlink" title="适配器模式使用场景"></a>适配器模式使用场景</h1><p>在以下情况下可以考虑使用适配器模式：</p><ol><li>接口兼容问题： 系统需要使用现有的类，而这些类的接口不符合系统的需求。</li><li>提高代码复用性：可以复用一些现有的、功能强大的类，而无需修改其源代码。</li><li>增强系统灵活性：将客户端代码与具体实现解耦。如果未来需要替换或引入新的被适配者，只需创建一个新的适配器，而无需修改客户端代码。这在集成第三方库或处理遗留代码时尤其有用。</li></ol><h1 id="适配器模式的结构"><a href="#适配器模式的结构" class="headerlink" title="适配器模式的结构"></a>适配器模式的结构</h1><p>适配器模式包含以下主要角色：</p><ol><li>目标接口（Target）：定义客户端使用的与特定领域相关的接口。</li><li>适配者（Adaptee）：包含一些已有的功能，但其接口与目标接口不兼容。</li><li>适配器（Adapter）：将适配者的接口转换成目标接口，使客户端能够与适配者进行交互。</li><li>客户端 (Client) ：使用目标接口的代码</li></ol><h1 id="适配器模式的实现"><a href="#适配器模式的实现" class="headerlink" title="适配器模式的实现"></a>适配器模式的实现</h1><h2 id="多种支付方式适配器"><a href="#多种支付方式适配器" class="headerlink" title="多种支付方式适配器"></a>多种支付方式适配器</h2><p>在电商系统中，我们经常需要集成多种支付方式（支付宝、微信支付、银联等），每种支付方式的接口都不相同。</p><h3 id="1-目标接口-Target"><a href="#1-目标接口-Target" class="headerlink" title="1. 目标接口 (Target)"></a>1. 目标接口 (Target)</h3><p>所有支付方式都需要提供一个统一的 pay(amount, orderId) 方法。<br></p><div class="highlight-wrap" data-rel="Css"><figure class="lpz highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">adapter</span><span class="selector-class">.pay</span>(<span class="selector-tag">amount</span>, <span class="selector-tag">orderId</span>);</span><br></pre></td></tr></table></figure></div><p></p><h3 id="2-适配者（Adaptee）"><a href="#2-适配者（Adaptee）" class="headerlink" title="2. 适配者（Adaptee）"></a>2. 适配者（Adaptee）</h3><div class="highlight-wrap" data-rel="Javascript"><figure class="lpz highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 支付宝支付类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlipayService</span> </span>&#123;</span><br><span class="line">  makePayment(amount, orderId) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`支付宝支付: 订单<span class="subst">$&#123;orderId&#125;</span>, 金额<span class="subst">$&#123;amount&#125;</span>元`</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">success</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">transactionId</span>: <span class="string">'alipay_'</span> + <span class="built_in">Date</span>.now(),</span><br><span class="line">      <span class="attr">message</span>: <span class="string">'支付宝支付成功'</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 微信支付类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WechatPayService</span> </span>&#123;</span><br><span class="line">  pay(money, orderNumber) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`微信支付: 订单<span class="subst">$&#123;orderNumber&#125;</span>, 金额<span class="subst">$&#123;money&#125;</span>元`</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">status</span>: <span class="string">'ok'</span>,</span><br><span class="line">      <span class="attr">wxTransactionId</span>: <span class="string">'wx_'</span> + <span class="built_in">Date</span>.now(),</span><br><span class="line">      <span class="attr">desc</span>: <span class="string">'微信支付完成'</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 银联支付类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionPayService</span> </span>&#123;</span><br><span class="line">  processPayment(orderInfo) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`银联支付: 订单<span class="subst">$&#123;orderInfo.id&#125;</span>, 金额<span class="subst">$&#123;orderInfo.amount&#125;</span>元`</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">code</span>: <span class="number">200</span>,</span><br><span class="line">      <span class="attr">unionPayId</span>: <span class="string">'union_'</span> + <span class="built_in">Date</span>.now(),</span><br><span class="line">      <span class="attr">result</span>: <span class="string">'银联支付成功'</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="3-适配器（Adapter）"><a href="#3-适配器（Adapter）" class="headerlink" title="3. 适配器（Adapter）"></a>3. 适配器（Adapter）</h3><div class="highlight-wrap" data-rel="Typescript"><figure class="lpz highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> PaymentAdapter &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">paymentService, <span class="keyword">type</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.paymentService = paymentService;</span><br><span class="line">    <span class="keyword">this</span>.type = <span class="keyword">type</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  pay(amount, orderId) &#123;</span><br><span class="line">    <span class="keyword">let</span> result;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">this</span>.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'alipay'</span>:</span><br><span class="line">        result = <span class="keyword">this</span>.paymentService.makePayment(amount, orderId);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          success: result.success,</span><br><span class="line">          transactionId: result.transactionId,</span><br><span class="line">          message: result.message</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">      <span class="keyword">case</span> <span class="string">'wechat'</span>:</span><br><span class="line">        result = <span class="keyword">this</span>.paymentService.pay(amount, orderId);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          success: result.status === <span class="string">'ok'</span>,</span><br><span class="line">          transactionId: result.wxTransactionId,</span><br><span class="line">          message: result.desc</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">      <span class="keyword">case</span> <span class="string">'unionpay'</span>:</span><br><span class="line">        result = <span class="keyword">this</span>.paymentService.processPayment(&#123; id: orderId, amount &#125;);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          success: result.code === <span class="number">200</span>,</span><br><span class="line">          transactionId: result.unionPayId,</span><br><span class="line">          message: result.result</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'不支持的支付方式'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="4-客户端代码"><a href="#4-客户端代码" class="headerlink" title="4. 客户端代码"></a>4. 客户端代码</h3><div class="highlight-wrap" data-rel="Haxe"><figure class="lpz highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processOrder</span></span>(paymentType, amount, orderId) &#123;</span><br><span class="line">  let paymentService;</span><br><span class="line">  let adapter;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">switch</span> (paymentType) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'alipay'</span>:<span class="type"></span></span><br><span class="line">      paymentService = <span class="keyword">new</span> <span class="type">AlipayService</span>();</span><br><span class="line">      adapter = <span class="keyword">new</span> <span class="type">PaymentAdapter</span>(paymentService, <span class="string">'alipay'</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'wechat'</span>:<span class="type"></span></span><br><span class="line">      paymentService = <span class="keyword">new</span> <span class="type">WechatPayService</span>();</span><br><span class="line">      adapter = <span class="keyword">new</span> <span class="type">PaymentAdapter</span>(paymentService, <span class="string">'wechat'</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'unionpay'</span>:<span class="type"></span></span><br><span class="line">      paymentService = <span class="keyword">new</span> <span class="type">UnionPayService</span>();</span><br><span class="line">      adapter = <span class="keyword">new</span> <span class="type">PaymentAdapter</span>(paymentService, <span class="string">'unionpay'</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  const result = adapter.pay(amount, orderId);</span><br><span class="line">  console.log(<span class="string">'支付结果:'</span>, result);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line">processOrder(<span class="string">'alipay'</span>, <span class="number">100</span>, <span class="string">'1'</span>);</span><br><span class="line">processOrder(<span class="string">'wechat'</span>, <span class="number">200</span>, <span class="string">'2'</span>);</span><br><span class="line">processOrder(<span class="string">'unionpay'</span>, <span class="number">300</span>, <span class="string">'3'</span>);</span><br></pre></td></tr></table></figure></div><h3 id="扩展新支付方式"><a href="#扩展新支付方式" class="headerlink" title="扩展新支付方式"></a>扩展新支付方式</h3><p>新增 PayPal 支付时：</p><ol><li>新建 PaypalService 类；</li><li>修改 PaymentAdapter 添加 “paypal” 的逻辑；</li><li>修改 processOrder 添加 “paypal” 分支；</li></ol><h1 id="优缺点总结"><a href="#优缺点总结" class="headerlink" title="优缺点总结"></a>优缺点总结</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>代码复用 ：可以复用现有的类，无需修改其源代码</li><li>解耦 ：将客户端代码与具体实现分离</li><li>灵活性 ：可以轻松替换或添加新的适配器</li><li>符合开闭原则 ：对扩展开放，对修改关闭</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>增加复杂性 ：引入了额外的抽象层</li><li>性能开销 ：可能会有轻微的性能损失</li><li>维护成本 ：需要维护适配器代码</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;适配器模式（Adapter Pattern）是一种结构型设计模式，它允许将一个类（或对象）的接口转换成客户端期望的另一个接口。适配器让那些由于接口不兼容而不能在一起工作的类可以协同工作。&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://blog.langpz.com/tags/javascript/"/>
    
      <category term="设计模式" scheme="http://blog.langpz.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="适配器模式" scheme="http://blog.langpz.com/tags/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JS设计模式-中介者模式</title>
    <link href="http://blog.langpz.com/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F.html"/>
    <id>http://blog.langpz.com/JS设计模式-中介者模式.html</id>
    <published>2025-05-25T16:04:14.000Z</published>
    <updated>2025-09-06T12:42:50.049Z</updated>
    
    <content type="html"><![CDATA[<p>中介者模式（Mediator Pattern）是一种行为型设计模式，它通过引入一个中介者对象来封装一系列对象之间的交互，从而使得这些对象之间不再相互耦合，从而使得对象之间的通信更加灵活和可维护。这种模式特别适用于管理多个对象或组件间的复杂通信。<br><a id="more"></a></p><h1 id="中介者模式案例"><a href="#中介者模式案例" class="headerlink" title="中介者模式案例"></a>中介者模式案例</h1><h2 id="聊天系统"><a href="#聊天系统" class="headerlink" title="聊天系统"></a>聊天系统</h2><p>一个简化的聊天系统的中介者模式实现<br><strong>中介者类</strong><br></p><div class="highlight-wrap" data-rel="Javascript"><figure class="lpz highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChatRoom</span> </span>&#123;</span><br><span class="line">  showMessage(user, message) &#123;</span><br><span class="line">    <span class="keyword">const</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`[<span class="subst">$&#123;time&#125;</span>] <span class="subst">$&#123;user.name&#125;</span>: <span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p></p><p><strong>用户类</strong><br></p><div class="highlight-wrap" data-rel="Kotlin"><figure class="lpz highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, chatRoom) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.chatRoom = chatRoom;</span><br><span class="line">  &#125;</span><br><span class="line">  send(message) &#123;</span><br><span class="line">    <span class="keyword">this</span>.chatRoom.showMessage(<span class="keyword">this</span>, message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p></p><p><strong>测试</strong><br></p><div class="highlight-wrap" data-rel="Actionscript"><figure class="lpz highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> chatRoom = <span class="keyword">new</span> ChatRoom();</span><br><span class="line"><span class="keyword">const</span> user1 = <span class="keyword">new</span> User(<span class="string">'Lanpz'</span>, chatRoom);</span><br><span class="line"><span class="keyword">const</span> user2 = <span class="keyword">new</span> User(<span class="string">'haha'</span>, chatRoom);</span><br><span class="line">user1.send(<span class="string">'Hello, Lanpz!'</span>); <span class="comment">// 输出: [11:00:00] Lanpz: Hello, Lanpz!</span></span><br><span class="line">user2.send(<span class="string">'Hi, haha!'</span>); <span class="comment">// 输出: [11:00:00] haha: Hi, haha!</span></span><br></pre></td></tr></table></figure></div><p></p><p>这个例子中，ChatRoom 类充当了中介者，User 类则是具体的用户。当用户发送消息时，消息会被传递给中介者，中介者打印消息。这样用户和用户之间的通信不再直接发生，而是通过中介者来进行。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>降低了对象之间的耦合性，使得对象之间的通信更加灵活和可维护。</li><li>提高了系统的可扩展性，当需要添加新的对象时，只需要修改中介者即可，不需要修改原有对象。</li><li>简化了对象之间的通信，使得对象之间的通信更加清晰和易于理解。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>中介者对象可能会变得非常复杂，维护起来可能会比较困难。</li><li>中介者对象可能会成为系统的瓶颈，影响系统的性能。</li><li>中介者对象可能会成为系统的单点故障，影响系统的可用性。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;中介者模式（Mediator Pattern）是一种行为型设计模式，它通过引入一个中介者对象来封装一系列对象之间的交互，从而使得这些对象之间不再相互耦合，从而使得对象之间的通信更加灵活和可维护。这种模式特别适用于管理多个对象或组件间的复杂通信。&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://blog.langpz.com/tags/javascript/"/>
    
      <category term="中介者模式" scheme="http://blog.langpz.com/tags/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="设计模式" scheme="http://blog.langpz.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>DeepSeek本地部署</title>
    <link href="http://blog.langpz.com/DeepSeek%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2.html"/>
    <id>http://blog.langpz.com/DeepSeek本地部署.html</id>
    <published>2025-04-19T10:31:29.000Z</published>
    <updated>2025-09-06T12:42:50.048Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DeepSeek本地部署"><a href="#DeepSeek本地部署" class="headerlink" title="DeepSeek本地部署"></a>DeepSeek本地部署</h1><p>DeepSeek 是由深度求索公司开发的一系列强大的开源大语言模型主打高效推理与成本优势。在本地部署这些模型，可以让你在没有网络连接或出于隐私考虑的情况下，也能利用它们的能力。<br><a id="more"></a></p><h1 id="硬件要求对比"><a href="#硬件要求对比" class="headerlink" title="硬件要求对比"></a>硬件要求对比</h1><p>本地部署 DeepSeek 模型对硬件有一定要求，主要取决于你选择的模型大小和是否使用量化。以下是不同参数规模模型的大致硬件需求对比：</p><table><thead><tr><th style="text-align:left">模型版本</th><th style="text-align:left">参数量（B = Billion）</th><th style="text-align:left">最低显存要求</th><th style="text-align:left">推荐硬件配置</th><th style="text-align:left">适用场景</th></tr></thead><tbody><tr><td style="text-align:left"><strong>1.5B</strong></td><td style="text-align:left">15 亿参数</td><td style="text-align:left">1GB 显存（纯 CPU 推理需 8GB 内存）</td><td style="text-align:left">CPU 4核+；内存8GB+；显卡可选4GB+（如GTX 1650）</td><td style="text-align:left">低资源设备、简单文本生成、物联网设备</td></tr><tr><td style="text-align:left"><strong>7B</strong></td><td style="text-align:left">70 亿参数</td><td style="text-align:left">8GB 显存（4-bit量化可降至4GB）</td><td style="text-align:left">CPU 8核+；内存16GB+；RTX 3070/4060（8GB+）</td><td style="text-align:left">中小型企业开发测试、文本摘要、轻量级对话</td></tr><tr><td style="text-align:left"><strong>8B</strong></td><td style="text-align:left">80 亿参数</td><td style="text-align:left">10GB 显存（8-bit量化）</td><td style="text-align:left">CPU 8核+；内存16GB+；RTX 4060Ti（10GB+）</td><td style="text-align:left">复杂逻辑推理、代码生成任务</td></tr><tr><td style="text-align:left"><strong>14B</strong></td><td style="text-align:left">140 亿参数</td><td style="text-align:left">16GB 显存</td><td style="text-align:left">CPU 12核+；内存32GB+；RTX 4090/A5000（16GB+）</td><td style="text-align:left">企业级复杂任务、长文本理解与生成</td></tr><tr><td style="text-align:left"><strong>32B</strong></td><td style="text-align:left">320 亿参数</td><td style="text-align:left">24GB 显存</td><td style="text-align:left">CPU 16核+；内存64GB+；A100 40GB或双RTX 3090</td><td style="text-align:left">高精度专业任务、多模态预处理、金融预测</td></tr><tr><td style="text-align:left"><strong>70B</strong></td><td style="text-align:left">700 亿参数</td><td style="text-align:left">40GB+ 显存</td><td style="text-align:left">CPU 32核；内存128GB+；多卡并行（2xA100 80GB或4xRTX 4090）</td><td style="text-align:left">科研机构、大型企业的高复杂度生成任务</td></tr></tbody></table><h1 id="Ollama-部署"><a href="#Ollama-部署" class="headerlink" title="Ollama 部署"></a>Ollama 部署</h1><p>Ollama 是一个流行的工具，可以让你轻松地在本地运行各种开源大语言模型，包括 DeepSeek。用户可以轻松加载并使用这些模型进行文本生成、情感分析、问答等任务。</p><h2 id="下载Ollama"><a href="#下载Ollama" class="headerlink" title="下载Ollama"></a>下载Ollama</h2><p>访问 <a href="https://ollama.com/download" target="_blank" rel="external">Ollama 官网</a>或 <a href="https://github.com/ollama/ollama/releases" target="_blank" rel="external">GitHub Releases</a>，下载对应系统的安装包并进行安装。</p><h2 id="下载DeepSeek模型"><a href="#下载DeepSeek模型" class="headerlink" title="下载DeepSeek模型"></a>下载DeepSeek模型</h2><p>下载并运行 DeepSeek-r1模型：打开终端或命令提示符，运行以下命令<br></p><div class="highlight-wrap" data-rel="Dockerfile"><figure class="lpz highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama <span class="keyword">run</span><span class="bash"> deepseek-r1:1.5b</span></span><br></pre></td></tr></table></figure></div><p></p><p>如果是第一次运行，Ollama 会自动下载模型文件。下载完成后，你就可以在终端直接与模型交互了。<br></p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="https://hexo-1252491761.cos.ap-beijing.myqcloud.com/DeepSeek%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/20250419112056.png" alt></div><div class="image-caption"></div></figure><p></p><h2 id="通过-API-调用："><a href="#通过-API-调用：" class="headerlink" title="通过 API 调用："></a>通过 API 调用：</h2><p>Ollama 还提供了一个本地 API (默认在 <a href="http://localhost:11434" target="_blank" rel="external">http://localhost:11434</a> )，你可以通过编程方式调用模型。</p><p>获取本地模型列表<br></p><div class="highlight-wrap" data-rel="Awk"><figure class="lpz highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http:<span class="regexp">//</span>localhost:<span class="number">11434</span><span class="regexp">/api/</span>tags</span><br></pre></td></tr></table></figure></div><p></p><p>发送对话请求（推理）<br></p><div class="highlight-wrap" data-rel="Groovy"><figure class="lpz highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">http:</span><span class="comment">//localhost:11434/api/generate -d '&#123;</span></span><br><span class="line">  <span class="string">"model"</span>: <span class="string">"deepseek-r1:1.5b"</span>,</span><br><span class="line">  <span class="string">"prompt"</span>: <span class="string">"你好，介绍一下你自己"</span>,</span><br><span class="line">  <span class="string">"stream"</span>: <span class="literal">false</span></span><br><span class="line">&#125;<span class="string">'</span></span><br></pre></td></tr></table></figure></div><p></p><h2 id="Web-UI-可视化界面"><a href="#Web-UI-可视化界面" class="headerlink" title="Web UI 可视化界面"></a>Web UI 可视化界面</h2><p>除了命令行和 API，DeepSeek 及其他大模型还可以通过多种 Web UI 工具进行可视化操作，适合不懂代码的用户或需要多轮对话、历史管理等功能的场景。常见的 Web UI 工具有：</p><ul><li><p><strong>LM Studio</strong><br>跨平台桌面应用，支持 DeepSeek、Llama、Qwen 等模型，内置模型下载和聊天界面，支持 OpenAI API 兼容。<br>官网：<a href="https://lmstudio.ai/" target="_blank" rel="external">https://lmstudio.ai/</a></p></li><li><p><strong>Text Generation WebUI (oobabooga)</strong><br>功能强大，支持多种模型格式（GGUF、GPTQ、Transformers等），插件丰富，适合高级用户。<br>GitHub：<a href="https://github.com/oobabooga/text-generation-webui" target="_blank" rel="external">https://github.com/oobabooga/text-generation-webui</a></p></li><li><p><strong>Open WebUI</strong><br>现代化 Web 聊天界面，支持 Ollama、LM Studio、OpenAI API 等后端，支持多会话和插件。<br>GitHub：<a href="https://github.com/open-webui/open-webui" target="_blank" rel="external">https://github.com/open-webui/open-webui</a></p></li><li><p><strong>Chatbot UI</strong><br>类似 ChatGPT 的前端界面，支持自定义 API 地址（如 Ollama、LM Studio）。<br>GitHub：<a href="https://github.com/mckaywrigley/chatbot-ui" target="_blank" rel="external">https://github.com/mckaywrigley/chatbot-ui</a></p></li></ul><p>这些 Web UI 工具大多支持直接加载本地模型，或通过 API 对接 Ollama/LM Studio 等后端，适合快速体验和部署本地大模型。你可以根据自己的需求和系统环境选择合适的 Web UI 工具。</p><h1 id="本地部署大模型的优点："><a href="#本地部署大模型的优点：" class="headerlink" title="本地部署大模型的优点："></a>本地部署大模型的优点：</h1><ol><li>数据隐私与安全 ：所有数据都在本地处理，无需上传到云端或第三方服务器，极大保障了用户隐私和企业数据安全。</li><li>离线可用 ：无需依赖互联网，断网环境下也能正常使用，适合对网络环境有要求的场景。</li><li>低延迟高响应 ：本地推理无需经过网络传输，响应速度更快，体验更流畅。</li><li>成本可控 ：一次性硬件投入后，无需持续支付云服务费用，长期使用更经济。</li><li>可定制化 ：可以根据自身需求对模型进行微调、裁剪、集成到本地业务系统，实现高度定制。</li></ol><h1 id="本地模型还能扩展的方向包括："><a href="#本地模型还能扩展的方向包括：" class="headerlink" title="本地模型还能扩展的方向包括："></a>本地模型还能扩展的方向包括：</h1><ul><li>本地知识库检索 ：结合本地文档、数据库，实现企业/个人知识问答、智能客服等场景。</li><li>插件与工具集成 ：与本地办公软件、自动化脚本、IoT设备等集成，提升自动化和智能化水平。</li><li>多模态扩展 ：支持图片、语音、视频等多模态输入输出，打造更丰富的AI应用。</li><li>本地微调与训练 ：根据自身数据进行微调，提升模型在特定领域的表现。</li><li>API服务化 ：本地模型可作为API服务，对接前端、移动端、Web UI等多种应用。</li><li>安全审计与合规 ：本地可控，便于满足行业合规和安全审计要求。<br>本地大模型不仅能保护数据，还能成为企业和个人智能化升级的基础平台，具备极强的扩展性和灵活性。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;DeepSeek本地部署&quot;&gt;&lt;a href=&quot;#DeepSeek本地部署&quot; class=&quot;headerlink&quot; title=&quot;DeepSeek本地部署&quot;&gt;&lt;/a&gt;DeepSeek本地部署&lt;/h1&gt;&lt;p&gt;DeepSeek 是由深度求索公司开发的一系列强大的开源大语言模型主打高效推理与成本优势。在本地部署这些模型，可以让你在没有网络连接或出于隐私考虑的情况下，也能利用它们的能力。&lt;br&gt;
    
    </summary>
    
    
      <category term="DeepSeek" scheme="http://blog.langpz.com/tags/DeepSeek/"/>
    
      <category term="AI" scheme="http://blog.langpz.com/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>JS设计模式-代理模式</title>
    <link href="http://blog.langpz.com/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html"/>
    <id>http://blog.langpz.com/JS设计模式-代理模式.html</id>
    <published>2025-03-22T14:42:06.000Z</published>
    <updated>2025-09-06T12:42:50.049Z</updated>
    
    <content type="html"><![CDATA[<p>代理模式（Proxy Pattern）是一种设计模式，它为对象提供一个代理，以控制对该对象的访问。可以把代理理解为对象的“中间人”，在访问目标对象时，代理可以拦截操作，并进行处理、修改或限制。在 ES6 中，JavaScript 引入了 Proxy 对象，使得代理模式的实现变得更加简单和强大。<br><a id="more"></a></p><h1 id="代理模式用法"><a href="#代理模式用法" class="headerlink" title="代理模式用法"></a>代理模式用法</h1><p>ES6 引入的 Proxy 对象让我们可以轻松创建代理。new Proxy(target, handler) 接受两个参数：target 是要代理的对象，handler 是一个对象，其中包含了代理的行为。<br></p><div class="highlight-wrap" data-rel="Qml"><figure class="lpz highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">  <span class="attribute">name</span>: <span class="string">'Lanpz'</span>,</span><br><span class="line">  <span class="attribute">age</span>: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="attribute">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params">target, property</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`访问属性: <span class="subst">$&#123;property&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> target[<span class="keyword">property</span><span class="string">]</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attribute">set</span>: <span class="function"><span class="keyword">function</span>(<span class="params">target, property, value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`设置 <span class="subst">$&#123;property&#125;</span> 属性为 <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">    target[<span class="keyword">property</span><span class="string">] </span>= value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line">proxy.name; <span class="comment">// 访问属性: name</span></span><br><span class="line">proxy.age = <span class="number">20</span>; <span class="comment">// 设置 age 属性为 20</span></span><br></pre></td></tr></table></figure></div><p></p><p>在上面的例子中，我们创建了一个代理对象 proxy，它代理了 target 对象。当我们访问 proxy 的属性时，会触发 get 方法，当我们设置 proxy 的属性时，会触发 set 方法。</p><h1 id="代理的常见应用场景"><a href="#代理的常见应用场景" class="headerlink" title="代理的常见应用场景"></a>代理的常见应用场景</h1><h2 id="1-数据验证"><a href="#1-数据验证" class="headerlink" title="1. 数据验证"></a>1. 数据验证</h2><p>代理可以用来验证数据的有效性，例如在表单提交时，我们可以使用代理来验证表单数据是否符合要求。<br></p><div class="highlight-wrap" data-rel="Qml"><figure class="lpz highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> form = &#123;</span><br><span class="line">  <span class="attribute">name</span>: <span class="string">''</span>,</span><br><span class="line">  <span class="attribute">age</span>: <span class="string">''</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="attribute">set</span>: <span class="function"><span class="keyword">function</span>(<span class="params">target, property, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">property</span><span class="string"> </span>=== <span class="string">'name'</span> &amp;&amp; value.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'姓名长度不能小于2'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">property</span><span class="string"> </span>=== <span class="string">'age'</span> &amp;&amp; (value &lt; <span class="number">0</span> || value &gt; <span class="number">150</span>)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'年龄必须在0-150之间'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    target[<span class="keyword">property</span><span class="string">] </span>= value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(form, handler);</span><br><span class="line">proxy.name = <span class="string">'Lanpz'</span>; <span class="comment">// 正确</span></span><br><span class="line">proxy.age = <span class="number">180</span>; <span class="comment">// 报错提示：年龄必须在0-150之间</span></span><br></pre></td></tr></table></figure></div><p></p><h2 id="2-保护对象属性"><a href="#2-保护对象属性" class="headerlink" title="2.保护对象属性"></a>2.保护对象属性</h2><p>代理可以用来保护对象的属性，例如在一个对象中，我们只想暴露部分属性给外部访问，但是不给外部删除和修改。<br></p><div class="highlight-wrap" data-rel="Qml"><figure class="lpz highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attribute">name</span>: <span class="string">'Lanpz'</span>,</span><br><span class="line">  <span class="attribute">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attribute">_password</span>: <span class="string">'123456'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="attribute">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params">target, property</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">property</span><span class="string"> </span>=== <span class="string">'_password'</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">'******'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target[<span class="keyword">property</span><span class="string">]</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attribute">set</span>: <span class="function"><span class="keyword">function</span>(<span class="params">target, property, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">property</span><span class="string">.startsWith('_')) &#123;</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'不能修改以 _ 开头的属性'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    target[<span class="keyword">property</span><span class="string">] </span>= value;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attribute">deleteProperty</span>: <span class="function"><span class="keyword">function</span>(<span class="params">target, property</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">property</span><span class="string">.startsWith('_')) &#123;</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'不能删除以 _ 开头的属性'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> target[<span class="keyword">property</span><span class="string">]</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj, handler);</span><br><span class="line"><span class="built_in">console</span>.log(proxy.name); <span class="comment">// Lanpz</span></span><br><span class="line">proxy.age = <span class="number">20</span>; <span class="comment">// 正确</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy._password); <span class="comment">// ******</span></span><br><span class="line"><span class="keyword">delete</span> proxy._password; <span class="comment">// 报错提示：不能删除以 _ 开头的属性</span></span><br></pre></td></tr></table></figure></div><p></p><ul><li>代理模式会带来一些性能上的开销，尤其是在频繁访问对象属性的场景下，因此在使用时需要权衡利弊。</li><li>过度使用代理模式可能会导致代码变得难以维护，因此在使用代理模式时需要谨慎。</li><li>通过代理模式，我们可以在不修改原始对象的情况下，增强对象的行为，实现各种高级功能。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代理模式（Proxy Pattern）是一种设计模式，它为对象提供一个代理，以控制对该对象的访问。可以把代理理解为对象的“中间人”，在访问目标对象时，代理可以拦截操作，并进行处理、修改或限制。在 ES6 中，JavaScript 引入了 Proxy 对象，使得代理模式的实现变得更加简单和强大。&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://blog.langpz.com/tags/javascript/"/>
    
      <category term="设计模式" scheme="http://blog.langpz.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="代理模式" scheme="http://blog.langpz.com/tags/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JS设计模式-单例模式</title>
    <link href="http://blog.langpz.com/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html"/>
    <id>http://blog.langpz.com/JS设计模式-单例模式.html</id>
    <published>2025-02-22T09:40:26.000Z</published>
    <updated>2025-09-06T12:42:50.049Z</updated>
    
    <content type="html"><![CDATA[<p>单例模式（Singleton Pattern），其核心思想是保证一个类只有一个实例，并提供一个全局访问点。<br><a id="more"></a><br>单例模式可以用来管理一些共享资源，例如全局配置、应用配置管理器、事件总线等。</p><h1 id="单例模式实现"><a href="#单例模式实现" class="headerlink" title="单例模式实现"></a>单例模式实现</h1><div class="highlight-wrap" data-rel="Kotlin"><figure class="lpz highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> (Single.instance) &#123;</span><br><span class="line">      <span class="keyword">return</span> Single.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.<span class="keyword">data</span> = []</span><br><span class="line">    Single.instance = <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  addData(<span class="keyword">data</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.<span class="keyword">data</span>.push(<span class="keyword">data</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  getData() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.<span class="keyword">data</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const single1 = new Single()</span><br><span class="line">const single2 = new Single()</span><br><span class="line">single1.addData(<span class="number">1</span>)</span><br><span class="line">console.log(single2.getData()) <span class="comment">// [1]</span></span><br><span class="line">console.log(single1 === single2) <span class="comment">// true, single1 和 single2 为同一实例</span></span><br></pre></td></tr></table></figure></div><p>例子中，构造函数检查 Single.instance 是否已存在。如果存在则返回已有实例，否则创建新实例并缓存。这样，无论调用多少次构造函数，都只能得到同一个实例。</p><h1 id="单例模式的优缺点"><a href="#单例模式的优缺点" class="headerlink" title="单例模式的优缺点"></a>单例模式的优缺点</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><table><thead><tr><th>优点</th><th>描述</th></tr></thead><tbody><tr><td>节省资源</td><td>只创建一个实例，避免重复创建和销毁对象</td></tr><tr><td>保证数据一致性</td><td>所有代码访问的都是同一个对象实例</td></tr><tr><td>全局访问点</td><td>提供一个全局访问点，方便在应用的不同部分使用</td></tr></tbody></table><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><table><thead><tr><th>缺点</th><th>描述</th></tr></thead><tbody><tr><td>全局状态</td><td>单例引入了全局状态，可能导致代码耦合度增加</td></tr><tr><td>测试困难</td><td>单例对象的状态在测试之间可能会相互影响，使测试变得困难</td></tr><tr><td>隐藏依赖</td><td>使用单例可能会隐藏类之间的依赖关系</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;单例模式（Singleton Pattern），其核心思想是保证一个类只有一个实例，并提供一个全局访问点。&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://blog.langpz.com/tags/javascript/"/>
    
      <category term="设计模式" scheme="http://blog.langpz.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="单例模式" scheme="http://blog.langpz.com/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JS设计模式-观察者模式</title>
    <link href="http://blog.langpz.com/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.html"/>
    <id>http://blog.langpz.com/JS设计模式-观察者模式.html</id>
    <published>2025-01-19T15:45:00.000Z</published>
    <updated>2025-09-06T12:42:50.049Z</updated>
    
    <content type="html"><![CDATA[<p>观察者模式是一种“一对多”依赖关系设计模式。</p><ul><li>被观察者（Subject）：保存着所有观察者的列表，当自身状态改变时，负责通知所有观察者。</li><li>观察者（Observer）：实现一个更新接口，当接收到通知时自动执行相应操作。<a id="more"></a></li></ul><h1 id="观察者模式实现"><a href="#观察者模式实现" class="headerlink" title="观察者模式实现"></a>观察者模式实现</h1><div class="highlight-wrap" data-rel="Javascript"><figure class="lpz highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 被观察者类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.observers = [];  <span class="comment">// 存储所有观察者</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 添加观察者</span></span><br><span class="line">  addObserver(observer) &#123;</span><br><span class="line">    <span class="keyword">this</span>.observers.push(observer);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 删除观察者</span></span><br><span class="line">  removeObserver(observer) &#123;</span><br><span class="line">    <span class="keyword">this</span>.observers = <span class="keyword">this</span>.observers.filter(<span class="function"><span class="params">o</span> =&gt;</span> o !== observer);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 通知所有观察者，传递相关数据</span></span><br><span class="line">  notifyObservers(data) &#123;</span><br><span class="line">    <span class="keyword">this</span>.observers.forEach(<span class="function"><span class="params">observer</span> =&gt;</span> observer.update(data));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 观察者类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 当被观察者状态变化时调用该方法</span></span><br><span class="line">  update(data) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> 收到更新：<span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例使用</span></span><br><span class="line"><span class="keyword">const</span> subject = <span class="keyword">new</span> Subject();</span><br><span class="line"><span class="keyword">const</span> observer1 = <span class="keyword">new</span> Observer(<span class="string">"观察者1"</span>);</span><br><span class="line"><span class="keyword">const</span> observer2 = <span class="keyword">new</span> Observer(<span class="string">"观察者2"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加观察者</span></span><br><span class="line">subject.addObserver(observer1);</span><br><span class="line">subject.addObserver(observer2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被观察者状态发生改变，通知所有观察者</span></span><br><span class="line">subject.notifyObservers(<span class="string">"状态 A 已更新"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除其中一个观察者后再次通知</span></span><br><span class="line">subject.removeObserver(observer1);</span><br><span class="line">subject.notifyObservers(<span class="string">"状态 B 已更新"</span>);</span><br></pre></td></tr></table></figure></div><h1 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h1><p><a href="https://jsbin.com/figavehado/edit?js,console" target="_blank" rel="external">demo地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;观察者模式是一种“一对多”依赖关系设计模式。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;被观察者（Subject）：保存着所有观察者的列表，当自身状态改变时，负责通知所有观察者。&lt;/li&gt;&lt;li&gt;观察者（Observer）：实现一个更新接口，当接收到通知时自动执行相应操作。
    
    </summary>
    
    
      <category term="javascript" scheme="http://blog.langpz.com/tags/javascript/"/>
    
      <category term="设计模式" scheme="http://blog.langpz.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="观察者模式" scheme="http://blog.langpz.com/tags/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>手写PromiseA+ 实现</title>
    <link href="http://blog.langpz.com/%E6%89%8B%E5%86%99PromiseA-%E5%AE%9E%E7%8E%B0.html"/>
    <id>http://blog.langpz.com/手写PromiseA-实现.html</id>
    <published>2024-12-31T19:28:49.000Z</published>
    <updated>2025-09-06T12:42:50.054Z</updated>
    
    <content type="html"><![CDATA[<p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了Promise对象。</p><a id="more"></a><p><a href="https://github.com/fe-doc/Promises-A-" target="_blank" rel="external">PromiseA+规范中文版</a></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><div class="highlight-wrap" data-rel="Typescript"><figure class="lpz highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> MyPromise &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="comment">// 2.1 Promise状态和值</span></span><br><span class="line">    <span class="keyword">this</span>.status = <span class="string">"pending"</span>;    <span class="comment">// 2.1.1 初始状态为pending</span></span><br><span class="line">    <span class="keyword">this</span>.value = <span class="literal">undefined</span>;     <span class="comment">// 2.1.2.2 fulfilled状态的值 2.1.3.2 rejected状态的值</span></span><br><span class="line">    <span class="keyword">this</span>.onResolvedCallbacks = [];  <span class="comment">// 2.2.6.1 存储fulfilled的回调</span></span><br><span class="line">    <span class="keyword">this</span>.onRejectedCallbacks = [];  <span class="comment">// 2.2.6.2 存储rejected的回调</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.1 确保异步执行</span></span><br><span class="line">    <span class="keyword">this</span>.useMicroTask = <span class="keyword">typeof</span> queueMicrotask === <span class="string">'function'</span> || <span class="keyword">typeof</span> process?.nextTick === <span class="string">'function'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 2.3.2 如果value是Promise，递归解析</span></span><br><span class="line">      <span class="keyword">if</span> (value <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">        <span class="keyword">return</span> value.then(resolve, reject);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 3.1 确保异步执行</span></span><br><span class="line">      <span class="keyword">this</span>.asyncTask(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">          <span class="keyword">this</span>.value = value;</span><br><span class="line">          <span class="keyword">this</span>.status = <span class="string">'resolved'</span>;  <span class="comment">// 状态从pending转换为fulfilled</span></span><br><span class="line">          <span class="comment">// 2.2.6.1 调用所有fulfilled回调</span></span><br><span class="line">          <span class="keyword">this</span>.onResolvedCallbacks.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn(value));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 3.1 确保异步执行</span></span><br><span class="line">      <span class="keyword">this</span>.asyncTask(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">          <span class="keyword">this</span>.value = reason;</span><br><span class="line">          <span class="keyword">this</span>.status = <span class="string">'rejected'</span>;  <span class="comment">// 状态从pending转换为rejected</span></span><br><span class="line">          <span class="comment">// 2.2.6.2 调用所有rejected回调</span></span><br><span class="line">          <span class="keyword">this</span>.onRejectedCallbacks.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn(reason));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">     <span class="comment">// 2.1.1、2.3 执行 executor 函数 resolve/reject 改变状态</span></span><br><span class="line">      executor(resolve, reject);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      reject(e); <span class="comment">// 2.2.7.2 捕获 executor 内的异常，并以 reject 的形式处理</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3.1 异步任务处理函数</span></span><br><span class="line">  asyncTask(fn) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.useMicroTask) &#123;</span><br><span class="line">      <span class="comment">// 优先使用微任务</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> queueMicrotask === <span class="string">'function'</span>) &#123;</span><br><span class="line">        queueMicrotask(fn);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> process?.nextTick === <span class="string">'function'</span>) &#123;</span><br><span class="line">        process.nextTick(fn);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 降级使用宏任务</span></span><br><span class="line">      setTimeout(fn, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.2 then方法</span></span><br><span class="line">  then(onFulfilled, onRejected) &#123;</span><br><span class="line">    <span class="comment">// 2.2.1 参数可选</span></span><br><span class="line">    onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">'function'</span> ? onFulfilled : <span class="function"><span class="params">value</span> =&gt;</span> value; <span class="comment">// 2.2.1.1</span></span><br><span class="line">    onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">'function'</span> ? onRejected : <span class="function"><span class="params">reason</span> =&gt;</span> &#123; <span class="keyword">throw</span> reason &#125;; <span class="comment">// 2.2.1.2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.2.7 then必须返回一个新的Promise</span></span><br><span class="line">    <span class="keyword">const</span> promise2 = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> handleFulfilled = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 3.1 确保异步执行</span></span><br><span class="line">        <span class="keyword">this</span>.asyncTask(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> x = onFulfilled(<span class="keyword">this</span>.value); <span class="comment">// 2.2.5 调用onFulfilled</span></span><br><span class="line">            resolvePromise(promise2, x, resolve, reject); <span class="comment">// 2.2.7.1 处理返回值</span></span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e); <span class="comment">// 2.2.7.2 捕获异常</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> handleRejected = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 3.1 确保异步执行</span></span><br><span class="line">        <span class="keyword">this</span>.asyncTask(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> x = onRejected(<span class="keyword">this</span>.value); <span class="comment">// 2.2.5 调用onRejected</span></span><br><span class="line">            resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 2.2.2 和 2.2.3 根据状态调用对应的回调</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="string">'resolved'</span>) &#123;</span><br><span class="line">        handleFulfilled();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="string">'rejected'</span>) &#123;</span><br><span class="line">        handleRejected();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 2.2.6 注册回调</span></span><br><span class="line">        <span class="keyword">this</span>.onResolvedCallbacks.push(handleFulfilled);</span><br><span class="line">        <span class="keyword">this</span>.onRejectedCallbacks.push(handleRejected);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> promise2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">catch</span>(onRejected) &#123;</span><br><span class="line">    <span class="comment">// 2.2.3.2 实现catch方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="literal">null</span>, onRejected);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> resolve(value) &#123;</span><br><span class="line">    <span class="comment">// 如果是Promise直接返回</span></span><br><span class="line">    <span class="keyword">return</span> value <span class="keyword">instanceof</span> MyPromise ? value : <span class="keyword">new</span> MyPromise(<span class="function"><span class="params">resolve</span> =&gt;</span> resolve(value));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.3 Promise解决过程</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span>(<span class="params">promise2, x, resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 2.3.1 防止循环引用</span></span><br><span class="line">  <span class="keyword">if</span> (promise2 === x) &#123;</span><br><span class="line">    reject(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'循环引用'</span>));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> called = <span class="literal">false</span>;  <span class="comment">// 2.3.3.3.3 确保只调用一次</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.3.3 如果x是对象或函数</span></span><br><span class="line">  <span class="keyword">if</span> (x !== <span class="literal">null</span> &amp;&amp; (<span class="keyword">typeof</span> x === <span class="string">'object'</span> || <span class="keyword">typeof</span> x === <span class="string">'function'</span>)) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 2.3.3.1 获取then方法</span></span><br><span class="line">      <span class="keyword">const</span> then = x.then;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">'function'</span>) &#123;</span><br><span class="line">        <span class="comment">// 2.3.3.3 调用then方法</span></span><br><span class="line">        then.call(</span><br><span class="line">          x,</span><br><span class="line">          <span class="function"><span class="params">y</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">            called = <span class="literal">true</span>;</span><br><span class="line">            resolvePromise(promise2, y, resolve, reject); <span class="comment">// 2.3.3.3.1 递归处理</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">            called = <span class="literal">true</span>;</span><br><span class="line">            reject(r); <span class="comment">// 2.3.3.3.2 处理reject</span></span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 2.3.3.4 如果then不是函数，直接resolve</span></span><br><span class="line">        resolve(x);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="comment">// 2.3.3.2 捕获异常</span></span><br><span class="line">      <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">      called = <span class="literal">true</span>;</span><br><span class="line">      reject(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 2.3.4 如果x不是对象或函数，直接resolve</span></span><br><span class="line">    resolve(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><div class="highlight-wrap" data-rel="Actionscript"><figure class="lpz highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MyPromise.deferred = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  obj.promise = <span class="keyword">new</span> MyPromise(<span class="function"><span class="keyword">function</span> <span class="params">(resolve, reject)</span> </span>&#123;</span><br><span class="line">    obj.resolve = resolve;</span><br><span class="line">    obj.reject = reject;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>保存MyPromise代码和上面代码创建 test.js 文件，并运行以下命令测试<br></p><div class="highlight-wrap" data-rel="Css"><figure class="lpz highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">npx</span> <span class="selector-tag">promises-aplus-tests</span> <span class="selector-tag">test</span><span class="selector-class">.js</span></span><br></pre></td></tr></table></figure></div><p></p><p>可以看到MyPromise通过 872个测试 符合 Promise/A+ 规范了！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了Promise对象。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Promise" scheme="http://blog.langpz.com/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>git reset 和 git revert的区别</title>
    <link href="http://blog.langpz.com/git-reset-%E5%92%8C-git-revert%E7%9A%84%E5%8C%BA%E5%88%AB.html"/>
    <id>http://blog.langpz.com/git-reset-和-git-revert的区别.html</id>
    <published>2024-11-24T12:27:37.000Z</published>
    <updated>2025-09-06T12:42:50.051Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-reset-和-git-revert的区别"><a href="#git-reset-和-git-revert的区别" class="headerlink" title="git reset 和 git revert的区别"></a>git reset 和 git revert的区别</h1><p>在 Git 中，git reset 和 git revert 是两个常见且功能强大的命令。它们都可以撤销更改，但适用场景和操作方式截然不同。<br><a id="more"></a></p><h1 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h1><p>git reset 用于移动当前分支的 HEAD 指针，并可以选择性地更改工作区和暂存区的状态。它主要用于“回滚到某个版本”，从历史记录中移除不需要的提交。</p><ul><li>常用参数<br>–soft：仅回滚到指定版本，保留暂存区和工作区的更改。<br>–mixed（默认）：回滚到指定版本，同时清空暂存区，但保留工作区更改。<br>–hard：回滚到指定版本，并丢弃暂存区和工作区的更改。</li></ul><p>提交历史如下<br></p><div class="highlight-wrap" data-rel="Clean"><figure class="lpz highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A -&gt; B -&gt; C -&gt; D (HEAD)</span><br></pre></td></tr></table></figure></div><p></p><p>回滚到提交B<br></p><div class="highlight-wrap" data-rel="Sql"><figure class="lpz highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">reset</span> <span class="comment">--hard B</span></span><br></pre></td></tr></table></figure></div><p></p><p>C 和 D 会被彻底删除，工作区将恢复到 B 的状态。现在的提交历史会变成如下。<br></p><div class="highlight-wrap" data-rel="Lisp"><figure class="lpz highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A -&gt; B (<span class="name">HEAD</span>)</span><br></pre></td></tr></table></figure></div><p></p><p>如果使用 –soft<br></p><div class="highlight-wrap" data-rel="Sql"><figure class="lpz highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">reset</span> <span class="comment">--soft B</span></span><br></pre></td></tr></table></figure></div><p></p><p>C 和 D 的更改会保留在暂存区，待提交。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>破坏性操作：–hard 会直接丢弃更改，如果没分支或tag保存，有数据丢失的风险，需谨慎使用。</li><li>本地历史调整：git reset 不会生成新的提交，只会修改现有提交的状态，通常仅在本地分支中使用。</li></ul><h1 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h1><p>git revert 是一种更安全的撤销方法。它通过创建一个新的提交来反转指定提交的更改，而不会改变提交历史。这非常适合在协作开发中撤销错误操作。</p><p>提交历史如下<br></p><div class="highlight-wrap" data-rel="Clean"><figure class="lpz highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A -&gt; B -&gt; C -&gt; D (HEAD)</span><br></pre></td></tr></table></figure></div><p></p><p>撤销提交C<br></p><div class="highlight-wrap" data-rel="Armasm"><figure class="lpz highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">revert </span>C</span><br></pre></td></tr></table></figure></div><p></p><p>Git 会生成一个新的提交 E，其内容与 C 的更改相反，撤销提交 C 带来的修改。<br></p><div class="highlight-wrap" data-rel="Clean"><figure class="lpz highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A -&gt; B -&gt; C -&gt; D -&gt; E (HEAD)</span><br></pre></td></tr></table></figure></div><p></p><p>提交 E = <strong>提交 B 的内容 + 提交 C 的反向更改 + 提交 D 的更改</strong>。</p><h2 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>不可破坏性：git revert 不会修改历史记录，非常适合需要保留团队协作完整性的场景。</li><li>可撤销性：如果你不小心 revert 了一个提交，还可以通过另一个 revert 恢复，<code>git revert E</code>。</li></ul><h1 id="两者的主要区别"><a href="#两者的主要区别" class="headerlink" title="两者的主要区别"></a>两者的主要区别</h1><table><thead><tr><th>特性</th><th>git reset</th><th>git revert</th></tr></thead><tbody><tr><td>历史记录</td><td>修改历史记录，移除指定提交</td><td>保留历史记录，生成新的提交</td></tr><tr><td>适用场景</td><td>本地修改，调整错误提交</td><td>团队协作，安全撤销已推送的提交</td></tr><tr><td>破坏性</td><td>可能丢失更改（尤其是 –hard）</td><td>不会丢失任何更改</td></tr><tr><td>是否生成新提交</td><td>不会生成新的提交</td><td>会生成新的提交</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;git-reset-和-git-revert的区别&quot;&gt;&lt;a href=&quot;#git-reset-和-git-revert的区别&quot; class=&quot;headerlink&quot; title=&quot;git reset 和 git revert的区别&quot;&gt;&lt;/a&gt;git reset 和 git revert的区别&lt;/h1&gt;&lt;p&gt;在 Git 中，git reset 和 git revert 是两个常见且功能强大的命令。它们都可以撤销更改，但适用场景和操作方式截然不同。&lt;br&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://blog.langpz.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript-5.0装饰器</title>
    <link href="http://blog.langpz.com/TypeScript-%E8%A3%85%E9%A5%B0%E5%99%A8.html"/>
    <id>http://blog.langpz.com/TypeScript-装饰器.html</id>
    <published>2024-10-19T16:08:53.000Z</published>
    <updated>2025-09-06T12:42:50.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h1><p>TypeScript 装饰器是一种特殊的声明，可以附加到类声明、方法、属性或参数上。它允许开发者在不修改原有代码的情况下，对类和它的成员进行额外的功能。它就像是在代码的外面包了一层，使得代码可以有更多的功能，而不用重复写同样的逻辑。装饰器本质上是一个函数，在运行时被调用，并接受被装饰的元素作为参数。<br><a id="more"></a><br>在 TypeScript 5.0 中，将对全新的处于 <a href="https://github.com/tc39/proposal-decorators" target="_blank" rel="external">stage3</a> 阶段的装饰器提案提供支持。</p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>装饰器使用 @ 符号来表示，后面跟着一个表达式。这个表达式必须是一个函数。<br></p><div class="highlight-wrap" data-rel="Monkey"><figure class="lpz highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decorator</span>(</span>constructor: <span class="function"><span class="keyword">Function</span>) &#123;</span></span><br><span class="line">  console.<span class="built_in">log</span>(<span class="comment">'decorator');</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@decorator</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">method</span>(</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 输出：decorator</span><br></pre></td></tr></table></figure></div><p></p><h2 id="装饰器类型"><a href="#装饰器类型" class="headerlink" title="装饰器类型"></a>装饰器类型</h2><div class="highlight-wrap" data-rel="Groovy"><figure class="lpz highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">type Decorator = (<span class="string">value:</span> Input, <span class="string">context:</span> &#123;</span><br><span class="line"><span class="symbol">  kind:</span> string;</span><br><span class="line"><span class="symbol">  name:</span> string | symbol;</span><br><span class="line"><span class="symbol">  access:</span> &#123;</span><br><span class="line">    get?(): unknown;</span><br><span class="line">    set?(value: unknown): <span class="keyword">void</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">private</span>?: <span class="keyword">boolean</span>;</span><br><span class="line">  <span class="keyword">static</span>?: <span class="keyword">boolean</span>;</span><br><span class="line">  addInitializer(<span class="string">initializer:</span> () =&gt; <span class="keyword">void</span>): <span class="keyword">void</span>;</span><br><span class="line">&#125;) =&gt; Output | <span class="keyword">void</span>;</span><br></pre></td></tr></table></figure></div><p>装饰器函数有两个参数。运行时，JavaScript 引擎会提供这两个参数。</p><ul><li>value：所要装饰的值，某些情况下可能是undefined（装饰属性时）。</li><li>context：上下文信息对象。<br>装饰器函数的返回值，是一个新版本的装饰对象，但也可以不返回任何值（void）。</li></ul><p>上下文对象也会根据被修饰的值而变化。分解属性：</p><ol><li>kind：字符串，表示装饰类型，值有class、method、getter、setter、field、accessor。</li><li>name：被装饰的值的名称: 或者在私有元素的情况下，对其的描述（例如可读名称）。</li><li>access：对象，包含访问这个值的方法，即存值器和取值器。</li><li>static: 布尔值，该值是否为静态元素。仅适用于类元素。</li><li>private：布尔值，该值是否为私有元素。仅适用于类元素。</li><li>addInitializer：函数，允许用户增加初始化逻辑。</li></ol><h2 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h2><p>类装饰器是用来装饰整个类的。它可以在类定义的时候加上一些额外的功能。例如我们想在每次创建类的时候记录日志，告诉我们类被创建了。<br></p><div class="highlight-wrap" data-rel="Typescript"><figure class="lpz highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LogClass</span>(<span class="params">constructor: <span class="built_in">Function</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'类被创建了'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@LogClass</span></span><br><span class="line"><span class="keyword">class</span> MyClass &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'MyClass 实例创建'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：类被创建了</span></span><br></pre></td></tr></table></figure></div><p></p><p>这个例子中，每次创建 MyClass 的实例时，控制台都会打印 “类被创建了”。</p><h2 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h2><p>方法装饰器是用来装饰类里面的方法的。可以通过方法装饰器来修改方法的行为，例如在方法执行前后打印一些信息。<br></p><div class="highlight-wrap" data-rel="Actionscript"><figure class="lpz highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LogMethod</span><span class="params">(target: any, context: ClassMethodDecoratorContext)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> originalMethod = target; <span class="comment">// target 就是当前被装饰的 class 方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个新方法</span></span><br><span class="line">  <span class="keyword">const</span> decoratedMethod = <span class="function"><span class="keyword">function</span> <span class="params">(this: unknown, <span class="rest_arg">...args</span>: unknown[])</span> </span>&#123;</span><br><span class="line">    console.log(`参数是：`, args); <span class="comment">// 打印参数</span></span><br><span class="line">    <span class="keyword">const</span> returnValue = originalMethod.call(<span class="keyword">this</span>, ...args); <span class="comment">// 调用原有方法</span></span><br><span class="line">    console.log(<span class="string">'代码执行完了'</span>);  <span class="comment">// 执行完后打印信息</span></span><br><span class="line">    <span class="keyword">return</span> returnValue;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> decoratedMethod</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">  @LogMethod</span><br><span class="line">  greet(name: string) &#123;</span><br><span class="line">    console.log(`Hello, $&#123;name&#125;!`); <span class="comment">// 输出 Hello, lgpz!</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let m = <span class="keyword">new</span> MyClass();</span><br><span class="line">m.greet(<span class="string">'lgpz'</span>); <span class="comment">// 调用方法</span></span><br></pre></td></tr></table></figure></div><p></p><p>在这个例子中，每次调用 greet 方法时，控制台会先打印参数，然后再执行原来的逻辑，原有逻辑执行完再输出：代码执行完了。</p><h2 id="属性装饰器"><a href="#属性装饰器" class="headerlink" title="属性装饰器"></a>属性装饰器</h2><p>属性装饰器不直接修改属性值，但可以在属性定义时附加一些信息，比如做权限检查或设置默认值。</p><div class="highlight-wrap" data-rel="Typescript"><figure class="lpz highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LogProperty</span>(<span class="params">target: <span class="built_in">any</span>, context: DecoratorContext</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`属性 <span class="subst">$&#123;[context.name]&#125;</span> 被定义`</span>, context.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> MyClass &#123;</span><br><span class="line">  <span class="meta">@LogProperty</span></span><br><span class="line">  name: <span class="built_in">string</span> = <span class="string">'TypeScript'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>在这个例子中，定义 name 属性时，控制台会打印 “属性 name 被定义”。</p><h2 id="getter-装饰器，setter-装饰器"><a href="#getter-装饰器，setter-装饰器" class="headerlink" title="getter 装饰器，setter 装饰器"></a>getter 装饰器，setter 装饰器</h2><p>getter 装饰器和 setter 装饰器，是分别针对类的取值器（getter）和存值器（setter）的装饰器。<br></p><div class="highlight-wrap" data-rel="Typescript"><figure class="lpz highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logged</span>(<span class="params">value: <span class="built_in">any</span>, &#123; kind, name &#125;: ClassMemberDecoratorContext</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (kind === <span class="string">"method"</span> || kind === <span class="string">"getter"</span> || kind === <span class="string">"setter"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="keyword">this</span>: unknown, ...args: <span class="built_in">any</span>[]</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`开始 <span class="subst">$&#123;[name]&#125;</span> with arguments <span class="subst">$&#123;args.join(", ")&#125;</span>`</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">const</span> ret = value.call(<span class="keyword">this</span>, ...args);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`结束 <span class="subst">$&#123;[name]&#125;</span>`</span>);</span><br><span class="line">      <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> C &#123;</span><br><span class="line">  <span class="keyword">private</span> _name: <span class="built_in">string</span> = <span class="string">''</span>;</span><br><span class="line">  <span class="meta">@logged</span></span><br><span class="line">  <span class="keyword">set</span> x(arg: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>._name = arg</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@logged</span></span><br><span class="line">  <span class="keyword">get</span> x() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> C()</span><br><span class="line">a.x = <span class="string">'langpz'</span> <span class="comment">// 输出： 开始 x with arguments langpz"  结束 x</span></span><br><span class="line"><span class="built_in">console</span>.log(a.x) <span class="comment">// 输出：开始 x with arguments  结束 x  langpz</span></span><br></pre></td></tr></table></figure></div><p></p><p>在这个例子中，get和set x 的时候都会打印开始和和结束。</p><h2 id="accessor-关键字"><a href="#accessor-关键字" class="headerlink" title="accessor 关键字"></a>accessor 关键字</h2><p>类装饰器引入了一个关键字accessor（自动访问器），用来属性的前缀。自动访问器与常规字段不同，它在类原型上定义 getter 和 setter。此 getter 和 setter 默认用于在私有槽上获取和设置值。accessor关键字前面，还可以加上static关键字和private关键字。</p><div class="highlight-wrap" data-rel="Actionscript"><figure class="lpz highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">  accessor x = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>它是一种简写形式，相当于声明属性x是私有属性#x的存取接口。上面的代码等同于下面的代码。</p><div class="highlight-wrap" data-rel="Cs"><figure class="lpz highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">C</span> &#123;</span><br><span class="line">  <span class="meta">#x = 1;</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">get</span> <span class="title">x</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.<span class="meta">#x;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">set</span> <span class="title">x</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.<span class="meta">#x = val;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap" data-rel="Typescript"><figure class="lpz highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logged</span>(<span class="params">value: <span class="built_in">any</span>, &#123; kind, name &#125;: ClassMemberDecoratorContext</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (kind === <span class="string">"accessor"</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; <span class="keyword">get</span>, <span class="keyword">set</span> &#125; = value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="keyword">get</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`getting <span class="subst">$&#123;[name]&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">get</span>.call(<span class="keyword">this</span>);</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="keyword">set</span>(val: <span class="built_in">any</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`setting <span class="subst">$&#123;[name]&#125;</span> to <span class="subst">$&#123;val&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">set</span>.call(<span class="keyword">this</span>, val);</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      init(initialValue:<span class="built_in">any</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`initializing <span class="subst">$&#123;[name]&#125;</span> with value <span class="subst">$&#123;initialValue&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">return</span> initialValue;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> C &#123;</span><br><span class="line">  <span class="meta">@logged</span> accessor x = <span class="string">'1'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> C();</span><br><span class="line"><span class="comment">// initializing x with value '1'</span></span><br><span class="line">c.x;</span><br><span class="line"><span class="comment">// getting x</span></span><br><span class="line">c.x = <span class="string">'langpz'</span>;</span><br><span class="line"><span class="comment">// setting x to langpz</span></span><br></pre></td></tr></table></figure></div><p>在这个例子中改写accessor属性的 getter 和 setter 方法。自动访问器初始化时以及每次访问时进行记录。</p><h2 id="addInitializer-方法"><a href="#addInitializer-方法" class="headerlink" title="addInitializer() 方法"></a>addInitializer() 方法</h2><p>addInitializer方法可用于为每种类型的值提供给装饰器的上下文对象。可以调用此方法将初始化函数与类或类元素关联起来，该函数可用于在定义值后运行任意代码以完成设置。<br>设置时机</p><ul><li>类装饰器：在类完全定义之后，并且类静态字段被分配之后。</li><li>类静态元素<ul><li>方法和 Getter/Setter 装饰器：在类定义期间，在分配静态类方法之后，在初始化任何静态类字段之前。</li><li>字段和访问器装饰器：在类定义期间，在应用它们的字段或访问器初始化之后立即初始化。</li></ul></li><li>类非静态元素<ul><li>方法和 Getter/Setter 装饰器：在类构造期间，在任何类字段初始化之前。</li><li>字段和访问器装饰器：在类构造期间，在应用它们的字段或访问器初始化之后立即初始化。</li></ul></li></ul><div class="highlight-wrap" data-rel="Typescript"><figure class="lpz highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bound</span>(<span class="params">value: <span class="built_in">any</span>, &#123; name, addInitializer &#125;:ClassMethodDecoratorContext</span>) </span>&#123;</span><br><span class="line">  addInitializer(<span class="function"><span class="keyword">function</span> (<span class="params"><span class="keyword">this</span>: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>[name] = <span class="keyword">this</span>[name].bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> C &#123;</span><br><span class="line">  message = <span class="string">"hello!"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@bound</span></span><br><span class="line">  m() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.message);</span><br><span class="line">  &#125;</span><br><span class="line">  c() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; m, c &#125; = <span class="keyword">new</span> C();</span><br><span class="line"></span><br><span class="line">m(); <span class="comment">// hello!</span></span><br></pre></td></tr></table></figure></div><p>在这个例子中addInitializer方法装饰器实现了@bound装饰器，将方法this绑定到类。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://devblogs.microsoft.com/typescript/announcing-typescript-5-0/#decorators" target="_blank" rel="external">ts5.0装饰器</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;装饰器&quot;&gt;&lt;a href=&quot;#装饰器&quot; class=&quot;headerlink&quot; title=&quot;装饰器&quot;&gt;&lt;/a&gt;装饰器&lt;/h1&gt;&lt;p&gt;TypeScript 装饰器是一种特殊的声明，可以附加到类声明、方法、属性或参数上。它允许开发者在不修改原有代码的情况下，对类和它的成员进行额外的功能。它就像是在代码的外面包了一层，使得代码可以有更多的功能，而不用重复写同样的逻辑。装饰器本质上是一个函数，在运行时被调用，并接受被装饰的元素作为参数。&lt;br&gt;
    
    </summary>
    
    
      <category term="TypeScript" scheme="http://blog.langpz.com/tags/TypeScript/"/>
    
      <category term="装饰器" scheme="http://blog.langpz.com/tags/%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript-声明文件</title>
    <link href="http://blog.langpz.com/TypeScript-%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6.html"/>
    <id>http://blog.langpz.com/TypeScript-声明文件.html</id>
    <published>2024-09-07T10:16:01.000Z</published>
    <updated>2025-09-06T12:42:50.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="声明文件"><a href="#声明文件" class="headerlink" title="声明文件"></a>声明文件</h1><p>TypeScript 声明文件（.d.ts）是用来描述 JavaScript 库或模块的类型信息的文件。它告诉 TypeScript 编译器，这些库或模块中的变量、函数、类等具有什么样的类型，从而使我们在使用这些库时能够获得类型检查和代码补全等功能，提高开发效率和代码质量。<br><a id="more"></a></p><h1 id="创建声明文件的场景"><a href="#创建声明文件的场景" class="headerlink" title="创建声明文件的场景"></a>创建声明文件的场景</h1><p>声明文件通常用于以下场景：</p><ol><li>JavaScript 库没有内置的类型定义：比如老旧的 JavaScript 库或者一些专用的小型库没有提供 .d.ts 文件，这时你可以手动创建一个声明文件来为该库添加类型支持。</li><li>当需要编写自己的 JavaScript 库或模块时，需要定义其类型信息以便其他开发者能够更好地使用它。</li><li>为第三方库添加类型：有些库可能已经在 DefinitelyTyped 上有类型定义，但你可能需要根据项目需求进行扩展或修改。</li></ol><h1 id="声明全局变量"><a href="#声明全局变量" class="headerlink" title="声明全局变量"></a>声明全局变量</h1><p>全局变量的声明<br></p><div class="highlight-wrap" data-rel="Typescript"><figure class="lpz highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> _: &#123;</span><br><span class="line">  map&lt;T&gt;<span class="function">(<span class="params">arr: T[], fn: (<span class="params">item: T</span>) =&gt; <span class="built_in">any</span></span>): <span class="params">T</span>[];</span><br><span class="line">&#125;;</span></span><br></pre></td></tr></table></figure></div><p></p><p>声明了一个全局变量 _，它是一个对象，其中有一个名为 map 的方法。</p><p>函数的声明<br></p><div class="highlight-wrap" data-rel="Sql"><figure class="lpz highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> lanpz(<span class="keyword">name</span>: <span class="keyword">string</span>): <span class="built_in">void</span>;</span><br></pre></td></tr></table></figure></div><p></p><p>声明了一个名为 lanpz 的函数，接受一个 string 类型的参数，并且不返回任何值（void）。</p><p>类的声明<br></p><div class="highlight-wrap" data-rel="Typescript"><figure class="lpz highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">class</span> Person &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>);</span><br><span class="line">  greet(<span class="params"></span>): string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p></p><p>声明了一个 Person 类，带有构造函数和一个方法。</p><p>模块的声明<br></p><div class="highlight-wrap" data-rel="Armasm"><figure class="lpz highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">declare</span> module <span class="string">"lodash"</span> &#123;</span><br><span class="line">  <span class="meta">export</span> <span class="meta">function</span> <span class="meta">map</span>&lt;T&gt;(arr: T[], <span class="meta">fn</span>: (<span class="keyword">item: </span>T) =&gt; any): T[]<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p></p><p>声明了一个 lodash 模块，其中包含一个 map 函数。</p><p>全局变量的声明</p><div class="highlight-wrap" data-rel="Routeros"><figure class="lpz highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">declare global &#123;</span><br><span class="line"> <span class="built_in"> interface </span>Window &#123;</span><br><span class="line">    name: string;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>Window 接口添加了一个名为 name 的属性，并且将其类型定义为 string。TypeScript 在任何地方引用 window.name 时都会认为它是一个 string 类型的值。</p><p>还可以使用 <strong>declare namespace</strong> 来声明一个命名空间; <strong>declare enum</strong> 来声明一个枚举类型; <strong>declare interface</strong> 来声明一个接口; <strong>declare type</strong> 来声明一个类型别名等。</p><h2 id="编写第三方声明文件"><a href="#编写第三方声明文件" class="headerlink" title="编写第三方声明文件"></a>编写第三方声明文件</h2><p>假设我们有一个名为 langpz-lib 的第三方库，它导出了一个对象，里面包含几个方法和属性：<br></p><div class="highlight-wrap" data-rel="Openscad"><figure class="lpz highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// langpz-lib.js</span></span><br><span class="line"><span class="function"><span class="keyword">module</span>.<span class="title">exports</span> =</span> &#123;</span><br><span class="line">  name: <span class="string">"LangpzLib"</span>,</span><br><span class="line">  <span class="built_in">version</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  hello: <span class="function"><span class="keyword">function</span> <span class="params">()</span> &#123;</span></span><br><span class="line">    console.<span class="built_in">log</span>(<span class="string">"Hello, LangpzLib!"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  config: &#123;</span><br><span class="line">    setting1: <span class="literal">true</span>,</span><br><span class="line">    setting2: <span class="string">"default"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p></p><p>TypeScript 声明文件示例<br></p><div class="highlight-wrap" data-rel="Typescript"><figure class="lpz highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// langpz-lib.d.ts</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> "langpz-lib" &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">const</span> name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">const</span> version: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>): <span class="title">void</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> Config &#123;</span><br><span class="line">    setting1: <span class="built_in">boolean</span>;</span><br><span class="line">    setting2: <span class="built_in">string</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">const</span> config: Config;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p></p><p>declare module 一般用于定义 CommonJS 模块或其他非 ES6 模块系统中的模块。</p><h1 id="使用第三方-types-包"><a href="#使用第三方-types-包" class="headerlink" title="使用第三方 @types 包"></a>使用第三方 @types 包</h1><p>在很多情况下，你不需要手动编写声明文件，因为大部分流行的 JavaScript 库都已经由社区编写好了类型定义文件，并发布到了 <a href="https://github.com/DefinitelyTyped/DefinitelyTyped" target="_blank" rel="external">DefinitelyTyped</a> 仓库中。你可以通过 npm 安装这些声明文件，通常以 @types 前缀命名。<br></p><div class="highlight-wrap" data-rel="Coffeescript"><figure class="lpz highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> install @types/lodash -D</span><br></pre></td></tr></table></figure></div><p></p><p>当使用lodash时默认会查找 node_modules/@types/lodash/index.d.ts 文件，无需手动配置。TypeScript 将自动引用这些类型声明文件。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;声明文件&quot;&gt;&lt;a href=&quot;#声明文件&quot; class=&quot;headerlink&quot; title=&quot;声明文件&quot;&gt;&lt;/a&gt;声明文件&lt;/h1&gt;&lt;p&gt;TypeScript 声明文件（.d.ts）是用来描述 JavaScript 库或模块的类型信息的文件。它告诉 TypeScript 编译器，这些库或模块中的变量、函数、类等具有什么样的类型，从而使我们在使用这些库时能够获得类型检查和代码补全等功能，提高开发效率和代码质量。&lt;br&gt;
    
    </summary>
    
    
      <category term="TypeScript" scheme="http://blog.langpz.com/tags/TypeScript/"/>
    
      <category term="声明文件" scheme="http://blog.langpz.com/tags/%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript-模块和命名空间</title>
    <link href="http://blog.langpz.com/TypeScript-%E6%A8%A1%E5%9D%97%E5%92%8C%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4.html"/>
    <id>http://blog.langpz.com/TypeScript-模块和命名空间.html</id>
    <published>2024-08-17T15:29:04.000Z</published>
    <updated>2025-09-06T12:42:50.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模块和命名空间"><a href="#模块和命名空间" class="headerlink" title="模块和命名空间"></a>模块和命名空间</h1><p>TypeScript 提供了两种主要的代码组织方式：模块（Modules）和命名空间（Namespaces）。它们都用于组织和管理代码，但有不同的用途和特性。<br><a id="more"></a></p><h2 id="模块（Modules）"><a href="#模块（Modules）" class="headerlink" title="模块（Modules）"></a>模块（Modules）</h2><p>在 TypeScript 中，可以通过 export 关键字来导出模块中的变量、函数、类和接口。导出的元素可以在其他模块中通过 import 关键字进行导入。<br>每个模块都拥有自己的作用域，不会与其他模块中的变量冲突。</p><h3 id="导出和导入"><a href="#导出和导入" class="headerlink" title="导出和导入"></a>导出和导入</h3><div class="highlight-wrap" data-rel="Typescript"><figure class="lpz highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// math.ts导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts导入</span></span><br><span class="line"><span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">'./math.ts'</span></span><br></pre></td></tr></table></figure></div><h3 id="默认导出"><a href="#默认导出" class="headerlink" title="默认导出"></a>默认导出</h3><div class="highlight-wrap" data-rel="Javascript"><figure class="lpz highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.ts导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'langpz'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts导入</span></span><br><span class="line"><span class="keyword">import</span> name <span class="keyword">from</span> <span class="string">'./a'</span></span><br></pre></td></tr></table></figure></div><p>默认导出可以使用 default 关键字。默认导出的项在导入时不需要使用大括号 {}。</p><h3 id="重命名导入和导出"><a href="#重命名导入和导出" class="headerlink" title="重命名导入和导出"></a>重命名导入和导出</h3><p>在导入和导出时，可以对名称进行重命名，以避免命名冲突或使名称更加语义化。</p><div class="highlight-wrap" data-rel="Typescript"><figure class="lpz highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// math.ts导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">subtract</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x - y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; add <span class="keyword">as</span> sum, subtract <span class="keyword">as</span> difference &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts导入</span></span><br><span class="line"><span class="keyword">import</span> &#123; sum, difference &#125; <span class="keyword">from</span> <span class="string">'./math'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">5</span>, <span class="number">3</span>)); <span class="comment">// 输出: 8</span></span><br><span class="line"><span class="built_in">console</span>.log(difference(<span class="number">5</span>, <span class="number">3</span>)); <span class="comment">// 输出: 2</span></span><br></pre></td></tr></table></figure></div><h2 id="命名空间（Namespaces）"><a href="#命名空间（Namespaces）" class="headerlink" title="命名空间（Namespaces）"></a>命名空间（Namespaces）</h2><p>命名空间是 TypeScript 提供的一种将代码分组的方式，适用于将代码组织在一个全局范围内。命名空间通过 namespace 关键字定义，通常用于在一个全局作用域中定义库或框架。</p><h3 id="使用命名空间"><a href="#使用命名空间" class="headerlink" title="使用命名空间"></a>使用命名空间</h3><div class="highlight-wrap" data-rel="Typescript"><figure class="lpz highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Utils &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.error(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用命名空间中的函数</span></span><br><span class="line">Utils.log(<span class="string">'lanpz'</span>); <span class="comment">// 输出:lanpz</span></span><br><span class="line">Utils.error(<span class="string">'https://blog.langpz.com'</span>); <span class="comment">// 输出:https://blog.langpz.com</span></span><br></pre></td></tr></table></figure></div><h3 id="命名空间嵌套使用"><a href="#命名空间嵌套使用" class="headerlink" title="命名空间嵌套使用"></a>命名空间嵌套使用</h3><div class="highlight-wrap" data-rel="Typescript"><figure class="lpz highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> zoo &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Dog &#123;</span><br><span class="line">        eat() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'zoo dog'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">namespace</span> bear &#123;</span><br><span class="line">        <span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">'熊'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(zoo.bear.name); <span class="comment">// 输出: 熊</span></span><br></pre></td></tr></table></figure></div><h3 id="合并命名空间"><a href="#合并命名空间" class="headerlink" title="合并命名空间"></a>合并命名空间</h3><p>TypeScript 允许合并同名的命名空间，这在定义复杂库或框架时非常有用。<br></p><div class="highlight-wrap" data-rel="Actionscript"><figure class="lpz highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Library &#123;</span><br><span class="line">    export <span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span>: void </span>&#123;</span><br><span class="line">        console.log(<span class="string">'Library initialized'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Library &#123;</span><br><span class="line">    export <span class="function"><span class="keyword">function</span> <span class="title">shutdown</span><span class="params">()</span>: void </span>&#123;</span><br><span class="line">        console.log(<span class="string">'Library shut down'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用合并后的命名空间</span></span><br><span class="line">Library.init(); <span class="comment">// 输出: Library initialized</span></span><br><span class="line">Library.shutdown(); <span class="comment">// 输出: Library shut down</span></span><br></pre></td></tr></table></figure></div><p></p><h1 id="模块（Modules）-VS-命名空间（Namespaces）"><a href="#模块（Modules）-VS-命名空间（Namespaces）" class="headerlink" title="模块（Modules） VS  命名空间（Namespaces）"></a>模块（Modules） VS 命名空间（Namespaces）</h1><table><thead><tr><th>特性</th><th>模块（Modules）</th><th>命名空间（Namespaces）</th></tr></thead><tbody><tr><td>作用域</td><td>独立作用域，避免命名冲突</td><td>全局作用域，可能导致命名冲突</td></tr><tr><td>依赖管理</td><td>通过导入和导出管理模块依赖</td><td>无法管理依赖，全部在全局可见</td></tr><tr><td>代码重用</td><td>易于在不同项目中重用</td><td>重用性较差，需要手动包含文件</td></tr><tr><td>动态加载</td><td>支持动态加载，提高性能</td><td>不支持动态加载，不适用于大型应用</td></tr><tr><td>兼容性</td><td>与 ECMAScript 标准兼容</td><td>非 ECMAScript 标准，现代项目不推荐使用</td></tr><tr><td>学习曲线</td><td>较为复杂，需要学习和配置</td><td>简单易用，适合快速开发</td></tr><tr><td>适用场景</td><td>适用于大型项目和现代应用</td><td>适用于小型项目和库开发</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;模块和命名空间&quot;&gt;&lt;a href=&quot;#模块和命名空间&quot; class=&quot;headerlink&quot; title=&quot;模块和命名空间&quot;&gt;&lt;/a&gt;模块和命名空间&lt;/h1&gt;&lt;p&gt;TypeScript 提供了两种主要的代码组织方式：模块（Modules）和命名空间（Namespaces）。它们都用于组织和管理代码，但有不同的用途和特性。&lt;br&gt;
    
    </summary>
    
    
      <category term="TypeScript" scheme="http://blog.langpz.com/tags/TypeScript/"/>
    
      <category term="模块， 命名空间" scheme="http://blog.langpz.com/tags/%E6%A8%A1%E5%9D%97%EF%BC%8C-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript-unknown类型</title>
    <link href="http://blog.langpz.com/TypeScript-unknown%E7%B1%BB%E5%9E%8B.html"/>
    <id>http://blog.langpz.com/TypeScript-unknown类型.html</id>
    <published>2024-07-20T10:42:30.000Z</published>
    <updated>2025-09-06T12:42:50.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="unknown类型"><a href="#unknown类型" class="headerlink" title="unknown类型"></a>unknown类型</h1><p>unknown 类型是 TypeScript 3.0 引入的一种类型，用于表示未知类型。与 any 类型类似，它可以赋值给任何类型的变量，但与 any 不同的是，unknown 类型更安全，因为它强制在使用之前进行类型检查。<br><a id="more"></a></p><h2 id="unknown"><a href="#unknown" class="headerlink" title="unknown"></a>unknown</h2><div class="highlight-wrap" data-rel="Groovy"><figure class="lpz highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let <span class="string">x:</span>unknown;</span><br><span class="line">x = <span class="literal">true</span>; <span class="comment">// 正确</span></span><br><span class="line">x = <span class="number">42</span>; <span class="comment">// 正确</span></span><br><span class="line">x = <span class="string">'langpz'</span>; <span class="comment">// 正确</span></span><br><span class="line">x.length <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line">let <span class="string">bolg:</span>unknown = &#123; <span class="string">name:</span> <span class="string">'langpz'</span> &#125;;</span><br><span class="line">bolg.name  <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></div><ul><li>unknown类型跟any类型的不同之处在于，不能直接访问unknown类型上的属性和方法，不能作为函数、类来使用</li></ul><p>联合类型中的unknown<br></p><div class="highlight-wrap" data-rel="Typescript"><figure class="lpz highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> UnionUnknown = unknown | <span class="literal">null</span> | <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br></pre></td></tr></table></figure></div><p></p><ul><li>联合类型与unknown都是unknown类型。</li></ul><p>交叉类型中的unknown<br></p><div class="highlight-wrap" data-rel="Fsharp"><figure class="lpz highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">UnionUnknown</span> </span>= unknown &amp; <span class="keyword">null</span></span><br></pre></td></tr></table></figure></div><p></p><ul><li>交叉类型与unknown都是其他类型, 如上类型就是null类型。</li></ul><h2 id="使用unknown-类型的上的属性和方法"><a href="#使用unknown-类型的上的属性和方法" class="headerlink" title="使用unknown 类型的上的属性和方法"></a>使用unknown 类型的上的属性和方法</h2><p>在使用 unknown 类型的值之前，必须先进行类型检查或类型断言，以确保类型安全。这样做的目的是防止运行时错误和确保代码的类型安全。</p><div class="highlight-wrap" data-rel="Cs"><figure class="lpz highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">value</span>: unknown;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用typeof进行类型检查</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">value</span> === <span class="string">"string"</span>) &#123;</span><br><span class="line">    console.log(<span class="keyword">value</span>.length); <span class="comment">// 现在TypeScript知道value是一个string</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">value</span> === <span class="string">"number"</span>) &#123;</span><br><span class="line">    console.log(<span class="keyword">value</span>.toFixed(<span class="number">2</span>)); <span class="comment">// 现在TypeScript知道value是一个number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="unknown-类型的优势"><a href="#unknown-类型的优势" class="headerlink" title="unknown 类型的优势"></a>unknown 类型的优势</h2><ol><li>类型安全：unknown 类型强制在使用之前进行类型检查或类型断言，确保类型安全。</li><li>避免类型错误：使用 unknown 类型可以避免运行时类型错误。</li><li>增强代码可读性：通过显式的类型检查，可以提高代码的可读性和可维护性。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;unknown类型&quot;&gt;&lt;a href=&quot;#unknown类型&quot; class=&quot;headerlink&quot; title=&quot;unknown类型&quot;&gt;&lt;/a&gt;unknown类型&lt;/h1&gt;&lt;p&gt;unknown 类型是 TypeScript 3.0 引入的一种类型，用于表示未知类型。与 any 类型类似，它可以赋值给任何类型的变量，但与 any 不同的是，unknown 类型更安全，因为它强制在使用之前进行类型检查。&lt;br&gt;
    
    </summary>
    
    
      <category term="TypeScript" scheme="http://blog.langpz.com/tags/TypeScript/"/>
    
      <category term="unknown" scheme="http://blog.langpz.com/tags/unknown/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript-条件类型</title>
    <link href="http://blog.langpz.com/TypeScript-%E6%9D%A1%E4%BB%B6%E7%B1%BB%E5%9E%8B.html"/>
    <id>http://blog.langpz.com/TypeScript-条件类型.html</id>
    <published>2024-06-23T17:05:18.000Z</published>
    <updated>2025-09-06T12:42:50.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="条件类型"><a href="#条件类型" class="headerlink" title="条件类型"></a>条件类型</h1><p>条件类型是 TypeScript 提供的一种基于条件的类型选择机制，可以根据类型的真假条件来进行类型推导和分配。这种功能使得 TypeScript 更加灵活和强大，能够处理复杂的类型逻辑。例如 <strong>A extends B ? C : D </strong>。<br><a id="more"></a></p><h2 id="条件类型基本使用"><a href="#条件类型基本使用" class="headerlink" title="条件类型基本使用"></a>条件类型基本使用</h2><p>可以使用extends关键字和三元表达式，实现条件判断。<br></p><div class="highlight-wrap" data-rel="Groovy"><figure class="lpz highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A <span class="keyword">extends</span> B ? C : D</span><br></pre></td></tr></table></figure></div><p></p><p>A extends B 是条件表达式，如果 A 能够赋值给 B（即 A 是 B 的子类型），那么结果类型就是 C，否则就是 B。</p><p>案例<br></p><div class="highlight-wrap" data-rel="Fsharp"><figure class="lpz highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">IsNumber</span>&lt;T&gt; </span>= T extends number ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">B</span> </span>= IsNumber&lt;number&gt;;  <span class="comment">// true</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">A</span> </span>= IsNumber&lt;string&gt;;  <span class="comment">// false</span></span><br></pre></td></tr></table></figure></div><p></p><p>IsNumber 是一个条件类型，它检查给定的类型 T 是否是 number 类型。如果是 number，则结果类型为 true，否则为 false。</p><h2 id="条件类型分发"><a href="#条件类型分发" class="headerlink" title="条件类型分发"></a>条件类型分发</h2><p>当条件类型作用于联合类型时，TypeScript 会对联合类型中的每一个成员单独进行条件类型的检查和分发。这意味着条件类型在联合类型上会进行分配和计算，而不是直接应用于整个联合类型。<br></p><div class="highlight-wrap" data-rel="Ada"><figure class="lpz highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">Example&lt;T&gt; </span>= T extends string ? <span class="symbol">'string</span>' : '<span class="keyword"><span class="keyword">not</span></span> <span class="type">string</span>';</span><br><span class="line"><span class="keyword">type</span> <span class="type">Result </span>= Example&lt;string | number&gt;;  // <span class="symbol">'string</span>' | <span class="symbol">'not</span> string'</span><br></pre></td></tr></table></figure></div><p></p><p>Result 的类型是 ‘string’ | ‘not string’，因为 Example 类型应用于 string 和 number 时，分别得到了 ‘string’ 和 ‘not string’。这里会用每一项依次进行分发，最终采用联合类型作为结果，等价如下。<br></p><div class="highlight-wrap" data-rel="Routeros"><figure class="lpz highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type c1 = Example&lt;string&gt;;<span class="built_in"></span><br><span class="line">type </span>c2 = Example&lt;number&gt;;<span class="built_in"></span><br><span class="line">type </span>c = c1 | c2</span><br></pre></td></tr></table></figure></div><p></p><h2 id="infer类型推断"><a href="#infer类型推断" class="headerlink" title="infer类型推断"></a>infer类型推断</h2><p>infer 关键字用于在条件类型中引入类型推断。它允许从上下文中推断出某个类型，而无需显式指定。这种特性对于处理复杂的类型转换和推断非常有用。</p><ul><li><p>MyReturnType 返回值类型</p><div class="highlight-wrap" data-rel="Ada"><figure class="lpz highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">MyReturnType&lt;T&gt; </span>= T extends (...args: any[]) =&gt; infer R ? R : <span class="type">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title">getUser</span>() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">&#123;</span> a: <span class="number">1</span>, name: <span class="string">"lanpz"</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="type">ExampleReturnType </span>= MyReturnType&lt;typeof getUser&gt;; // &#123; a: number, name: string &#125;</span><br></pre></td></tr></table></figure></div></li><li><p>MyInstanceType 实例类型</p><div class="highlight-wrap" data-rel="Routeros"><figure class="lpz highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">  constructor(name: string, age: number) &#123; &#125;</span><br><span class="line">&#125;<span class="built_in"></span><br><span class="line">type </span>MyInstanceType&lt;T&gt; = T extends &#123; new(<span class="built_in">..</span>.args: any): infer R &#125; ? R : any<span class="built_in"></span><br><span class="line">type </span>MyInstance = MyInstanceType&lt;typeof Person&gt;</span><br></pre></td></tr></table></figure></div></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;条件类型&quot;&gt;&lt;a href=&quot;#条件类型&quot; class=&quot;headerlink&quot; title=&quot;条件类型&quot;&gt;&lt;/a&gt;条件类型&lt;/h1&gt;&lt;p&gt;条件类型是 TypeScript 提供的一种基于条件的类型选择机制，可以根据类型的真假条件来进行类型推导和分配。这种功能使得 TypeScript 更加灵活和强大，能够处理复杂的类型逻辑。例如 &lt;strong&gt;A extends B ? C : D &lt;/strong&gt;。&lt;br&gt;
    
    </summary>
    
    
      <category term="TypeScript" scheme="http://blog.langpz.com/tags/TypeScript/"/>
    
      <category term="条件类型" scheme="http://blog.langpz.com/tags/%E6%9D%A1%E4%BB%B6%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript-类型保护</title>
    <link href="http://blog.langpz.com/TypeScript-%E7%B1%BB%E5%9E%8B%E4%BF%9D%E6%8A%A4.html"/>
    <id>http://blog.langpz.com/TypeScript-类型保护.html</id>
    <published>2024-05-25T12:48:08.000Z</published>
    <updated>2025-09-06T12:42:50.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类型保护"><a href="#类型保护" class="headerlink" title="类型保护"></a>类型保护</h1><p>在 TypeScript 中，类型保护（Type Guards）通过在运行时检查变量的类型，可以在特定的代码块中自动识别变量的属性和方法，从而确保代码的类型安全，提示并规避不合法的操作。<br><a id="more"></a></p><h2 id="typeof类型保护"><a href="#typeof类型保护" class="headerlink" title="typeof类型保护"></a>typeof类型保护</h2><p>typeof 操作符可以用来判断基本类型，如 string、number 等。<br></p><div class="highlight-wrap" data-rel="Cs"><figure class="lpz highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">langpz</span>(<span class="params"><span class="keyword">value</span>: <span class="keyword">string</span> | number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">value</span>.toFixed(<span class="number">2</span>) <span class="comment">// 报错 类型“string”上不存在属性“toFixed”</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">value</span> === <span class="string">'string'</span>) &#123;</span><br><span class="line">        console.log(<span class="keyword">value</span>.toUpperCase()); <span class="comment">// value 被识别为 string</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">value</span> === <span class="string">'number'</span>) &#123;</span><br><span class="line">        console.log(<span class="keyword">value</span>.toFixed(<span class="number">2</span>)); <span class="comment">// value 被识别为 number</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">langpz(<span class="string">"hello"</span>); <span class="comment">// 输出: "HELLO"</span></span><br><span class="line">langpz(<span class="number">123.456</span>); <span class="comment">// 输出: "123.46"</span></span><br></pre></td></tr></table></figure></div><p></p><p>通过 typeof 操作符，我们可以对变量进行识别类型，避免调用字符串或者数字方法报错。</p><h2 id="instanceof类型保护"><a href="#instanceof类型保护" class="headerlink" title="instanceof类型保护"></a>instanceof类型保护</h2><div class="highlight-wrap" data-rel="Javascript"><figure class="lpz highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    miao() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"喵喵"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    wang() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"汪汪"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> speak: <span class="function">(<span class="params">animal: Cat | Dog</span>) =&gt;</span> <span class="keyword">void</span> = <span class="function">(<span class="params">animal</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (animal <span class="keyword">instanceof</span> Dog) &#123;</span><br><span class="line">        animal.wang(); <span class="comment">// animal 被识别为 Dog</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (animal <span class="keyword">instanceof</span> Cat) &#123;</span><br><span class="line">        animal.miao(); <span class="comment">// animal 被识别为 Cat</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog();</span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> Cat();</span><br><span class="line"></span><br><span class="line">speak(dog); <span class="comment">// 输出: "汪汪!"</span></span><br><span class="line">speak(cat); <span class="comment">// 输出: "喵喵!"</span></span><br></pre></td></tr></table></figure></div><p>instanceof 检查使得 TypeScript 能够在不同的代码块中识别 animal 是 Dog 还是 Cat 的实例，并调用相应的方法。</p><h2 id="in类型保护"><a href="#in类型保护" class="headerlink" title="in类型保护"></a>in类型保护</h2><p>in 操作符用于检查对象上是否存在某个属性。它适用于检查具有不同属性的联合类型。<br></p><div class="highlight-wrap" data-rel="Typescript"><figure class="lpz highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Fish &#123;</span><br><span class="line">    swim(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Bird &#123;</span><br><span class="line">    fly(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params">animal: Fish | Bird</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'swim'</span> <span class="keyword">in</span> animal) &#123;</span><br><span class="line">        animal.swim(); <span class="comment">// animal 被识别为 Fish</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        animal.fly(); <span class="comment">// animal 被识别为 Bird</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fish: Fish = &#123; swim: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Swimming"</span>) &#125;;</span><br><span class="line"><span class="keyword">const</span> bird: Bird = &#123; fly: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Flying"</span>) &#125;;</span><br><span class="line">getType(fish); <span class="comment">// 输出: "Swimming"</span></span><br><span class="line">getType(bird); <span class="comment">// 输出: "Flying"</span></span><br></pre></td></tr></table></figure></div><p></p><h2 id="自定义类型保护"><a href="#自定义类型保护" class="headerlink" title="自定义类型保护"></a>自定义类型保护</h2><p>自定义类型保护通常是一个函数，它接受一个参数，并返回一个类型谓词，即一个表达式，其结果为布尔值，用于确定参数是否属于某个特定的类型。<br></p><div class="highlight-wrap" data-rel="Typescript"><figure class="lpz highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Fish &#123;</span><br><span class="line">    swim(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Bird &#123;</span><br><span class="line">    fly(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBird</span>(<span class="params">animal: Fish | Bird</span>):<span class="title">animal</span> <span class="title">is</span> <span class="title">Bird</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'fly'</span> <span class="keyword">in</span> animal</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAniaml</span> (<span class="params">animal:Fish | Bird</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isBird(animal))&#123;</span><br><span class="line">        animal.fly(); <span class="comment">// animal 被识别为 Bird</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        animal.swim(); <span class="comment">// animal 被识别为 Fish</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fish: Fish = &#123; swim: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Swimming"</span>) &#125;;</span><br><span class="line"><span class="keyword">const</span> bird: Bird = &#123; fly: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Flying"</span>) &#125;;</span><br><span class="line"></span><br><span class="line">getAniaml(fish); <span class="comment">// 输出: "Swimming"</span></span><br><span class="line">getAniaml(bird); <span class="comment">// 输出: "Flying"</span></span><br></pre></td></tr></table></figure></div><p></p><p>自定义类型保护函数 isBird 通过检查 fly 方法是否存在来识别 animal 是否为 Bird 类型。</p><h2 id="可辨识联合类型"><a href="#可辨识联合类型" class="headerlink" title="可辨识联合类型"></a>可辨识联合类型</h2><p>可辨识联合类型是一种特殊的联合类型，它允许我们根据某个字段（通常称为“标签”或“可辨识字段”）的值来区分不同的类型。<br></p><div class="highlight-wrap" data-rel="Typescript"><figure class="lpz highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Fish &#123;</span><br><span class="line">    kind: <span class="string">"fish"</span>;</span><br><span class="line">    swim(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Bird &#123;</span><br><span class="line">    kind: <span class="string">"bird"</span>;</span><br><span class="line">    fly(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Animal = Fish | Bird;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeSound</span>(<span class="params">animal: Animal</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (animal.kind) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"fish"</span>:</span><br><span class="line">            animal.swim(); <span class="comment">// 在这里，animal 被识别为 Fish 类型</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"bird"</span>:</span><br><span class="line">            animal.fly(); <span class="comment">// 在这里，animal 被识别为 Bird 类型</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="comment">// 这是一个类型永远不会到达的分支，但可以为了完整性而保留</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Unknown animal kind"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myFish: Fish = &#123; kind: <span class="string">"fish"</span>, swim: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"langpz fish"</span>) &#125;;</span><br><span class="line"><span class="keyword">const</span> myBird: Bird = &#123; kind: <span class="string">"bird"</span>, fly: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"langpz bird"</span>) &#125;;</span><br><span class="line"></span><br><span class="line">makeSound(myFish); <span class="comment">// 输出: "langpz fish"</span></span><br><span class="line">makeSound(myBird); <span class="comment">// 输出: "langpz bird"</span></span><br></pre></td></tr></table></figure></div><p></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;类型保护&quot;&gt;&lt;a href=&quot;#类型保护&quot; class=&quot;headerlink&quot; title=&quot;类型保护&quot;&gt;&lt;/a&gt;类型保护&lt;/h1&gt;&lt;p&gt;在 TypeScript 中，类型保护（Type Guards）通过在运行时检查变量的类型，可以在特定的代码块中自动识别变量的属性和方法，从而确保代码的类型安全，提示并规避不合法的操作。&lt;br&gt;
    
    </summary>
    
    
      <category term="TypeScript" scheme="http://blog.langpz.com/tags/TypeScript/"/>
    
      <category term="类型保护" scheme="http://blog.langpz.com/tags/%E7%B1%BB%E5%9E%8B%E4%BF%9D%E6%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript-交叉类型</title>
    <link href="http://blog.langpz.com/TypeScript-%E4%BA%A4%E5%8F%89%E7%B1%BB%E5%9E%8B.html"/>
    <id>http://blog.langpz.com/TypeScript-交叉类型.html</id>
    <published>2024-04-27T10:20:57.000Z</published>
    <updated>2025-09-06T12:42:50.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h1><p>在 TypeScript 中，交叉类型（Intersection Types）是一种非常有用的类型操作符，它允许我们将多个类型合并为一个新的类型。<br><a id="more"></a><br>合并对象属性： 当你需要将多个对象的属性合并成一个新对象时，可以使用交叉类型。这在实现对象组合时非常有用。<br></p><div class="highlight-wrap" data-rel="Sqf"><figure class="lpz highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span> <span class="built_in">Name</span> = &#123; <span class="built_in">name</span>: string;  &#125;;</span><br><span class="line"><span class="built_in">type</span> Age = &#123; age: number; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span> Person = <span class="built_in">Name</span> &amp; Age;</span><br><span class="line">let lanpz: Person = &#123; <span class="built_in">name</span>: <span class="string">'langpz'</span>, age: <span class="string">'18'</span> &#125;</span><br></pre></td></tr></table></figure></div><p></p><p>在上面的示例中，我们定义了两个类型 Name 和 Age，然后使用 &amp; 符号将它们合并为一个新的类型 Person Person 类型具有 Name 和 Age 类型的所有属性。lanpz</p><p>函数参数： 当你需要定义一个函数，其参数具有多种类型的属性时，可以使用交叉类型。<br></p><div class="highlight-wrap" data-rel="Stylus"><figure class="lpz highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function mixin&lt;T, K&gt;(<span class="selector-tag">a</span>: T, <span class="selector-tag">b</span>: K): T &amp; K &#123;</span><br><span class="line">    return &#123; ..<span class="selector-class">.a</span>, ..<span class="selector-class">.b</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line">const lan = mixin(&#123; name: <span class="string">'langpz'</span> &#125;, &#123; <span class="selector-tag">address</span>: <span class="string">'https://blog.langpz.com/'</span> &#125;)</span><br></pre></td></tr></table></figure></div><p></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;交叉类型&quot;&gt;&lt;a href=&quot;#交叉类型&quot; class=&quot;headerlink&quot; title=&quot;交叉类型&quot;&gt;&lt;/a&gt;交叉类型&lt;/h1&gt;&lt;p&gt;在 TypeScript 中，交叉类型（Intersection Types）是一种非常有用的类型操作符，它允许我们将多个类型合并为一个新的类型。&lt;br&gt;
    
    </summary>
    
    
      <category term="TypeScript" scheme="http://blog.langpz.com/tags/TypeScript/"/>
    
      <category term="交叉类型" scheme="http://blog.langpz.com/tags/%E4%BA%A4%E5%8F%89%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript-联合类型</title>
    <link href="http://blog.langpz.com/TypeScript-%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B.html"/>
    <id>http://blog.langpz.com/TypeScript-联合类型.html</id>
    <published>2024-03-22T20:11:51.000Z</published>
    <updated>2025-09-06T12:42:50.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h1><p>联合类型是 TypeScript 中的一个高级类型，允许一个变量是几种类型之一。你可以使用管道符（|）来定义一个联合类型，这告诉 TypeScript，该变量可以存储管道符两侧任何一种类型的值。例如，string | number 类型的变量可以接受字符串或数字。<br><a id="more"></a></p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><div class="highlight-wrap" data-rel="Typescript"><figure class="lpz highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> langpz:<span class="built_in">string</span> | <span class="built_in">number</span>; <span class="comment">// 联合类型  </span></span><br><span class="line"><span class="built_in">console</span>.log(langpz!.toString()); <span class="comment">// 公共方法</span></span><br><span class="line">langpz = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(langpz!.toFixed(<span class="number">2</span>)); <span class="comment">// number方法</span></span><br><span class="line">langpz = <span class="string">'lan'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(langpz!.toLowerCase()); <span class="comment">// 字符串方法</span></span><br><span class="line">langpz = <span class="literal">true</span> <span class="comment">// error Type 'boolean' is not assignable to type 'string | number'</span></span><br></pre></td></tr></table></figure></div><p>在这个例子中，langpz 被定义为可以是 string 或 number 类型。给它赋值字符串或数字都是允许的，但如果尝试赋值其他类型的值，TypeScript 编译器将会报错。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>联合类型在很多情况下都非常有用，特别是在处理多种输入类型但又不想失去类型安全性的情况下。一些常见的使用场景包括：</p><p>函数参数：当你希望一个函数能接受不同类型的参数时。<br>返回类型：当一个函数可能返回多种类型的值时。<br>数组和其他集合：当数组或其他数据结构中可能包含多种类型的元素时。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;联合类型&quot;&gt;&lt;a href=&quot;#联合类型&quot; class=&quot;headerlink&quot; title=&quot;联合类型&quot;&gt;&lt;/a&gt;联合类型&lt;/h1&gt;&lt;p&gt;联合类型是 TypeScript 中的一个高级类型，允许一个变量是几种类型之一。你可以使用管道符（|）来定义一个联合类型，这告诉 TypeScript，该变量可以存储管道符两侧任何一种类型的值。例如，string | number 类型的变量可以接受字符串或数字。&lt;br&gt;
    
    </summary>
    
    
      <category term="TypeScript" scheme="http://blog.langpz.com/tags/TypeScript/"/>
    
      <category term="联合类型" scheme="http://blog.langpz.com/tags/%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript-泛型</title>
    <link href="http://blog.langpz.com/TypeScript-%E6%B3%9B%E5%9E%8B.html"/>
    <id>http://blog.langpz.com/TypeScript-泛型.html</id>
    <published>2024-02-25T14:27:17.000Z</published>
    <updated>2025-09-06T12:42:50.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是泛型？"><a href="#什么是泛型？" class="headerlink" title="什么是泛型？"></a>什么是泛型？</h1><p>泛型是一种参数化类型的概念，允许我们在定义函数、类、接口等时使用类型变量来表示未知的具体类型。通过泛型，我们可以编写出更通用的代码，从而提高代码的复用性和可读性。在 TypeScript 中，泛型以<t>的形式表示，其中 T 可以是任何标识符，常用于表示类型参数。<br><a id="more"></a></t></p><h2 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h2><div class="highlight-wrap" data-rel="Qml"><figure class="lpz highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArg</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> output = getArg&lt;<span class="built_in">string</span>&gt;(<span class="string">"langpz"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(output); <span class="comment">// 输出：langpz</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> output2 = getArg&lt;number&gt;(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(output2); <span class="comment">// 输出：1</span></span><br></pre></td></tr></table></figure></div><p>getArg 函数接受一个参数 arg，并返回相同的参数。通过<t>，使函数 getArg 成为了一个泛型函数，可以接受任意类型的参数，并返回相同类型的值。</t></p><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><p>泛型类使用（&lt;&gt;）括起泛型类型，跟在类名后面。<br></p><div class="highlight-wrap" data-rel="Typescript"><figure class="lpz highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Info&lt;T, U&gt; &#123; <span class="comment">// 这里的 T 和 U 是使用接口的时候传入</span></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name: T, <span class="keyword">public</span> age: U</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> langpz = <span class="keyword">new</span> Info&lt;<span class="built_in">string</span>, <span class="built_in">number</span>&gt;(<span class="string">"langpz"</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(langpz.name); <span class="comment">// 输出：langpz</span></span><br></pre></td></tr></table></figure></div><p></p><p>注：类的<strong>静态属性</strong>不能引用泛型类型。</p><h2 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h2><p>有时候，我们希望泛型参数具有某些特定的属性或方法。可以使用泛型约束来实现。如果不约束会ts会直接报错属性或方法不存在。<br></p><div class="highlight-wrap" data-rel="Typescript"><figure class="lpz highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Lengthwise &#123;</span><br><span class="line">    length: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArg</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Lengthwise</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.length)</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> output = getArg&lt;<span class="built_in">string</span>&gt;(<span class="string">"langpz"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(output); <span class="comment">// 输出：langpz</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> output2 = getArg&lt;<span class="built_in">number</span>&gt;(<span class="number">1</span>); <span class="comment">// 报错 Type 'number' does not satisfy the constraint 'Lengthwise'</span></span><br></pre></td></tr></table></figure></div><p></p><p>使用了 extends 关键字来约束泛型 T 必须满足 Lengthwise 接口的要求，传入的参数必须包含必须 length 的属性。</p><h2 id="默认泛型"><a href="#默认泛型" class="headerlink" title="默认泛型"></a>默认泛型</h2><div class="highlight-wrap" data-rel="Excel"><figure class="lpz highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span> NameType&lt;<span class="built_in">T</span> = string&gt; = &#123;</span><br><span class="line">    <span class="built_in">na</span><span class="symbol">me:</span> <span class="built_in">T</span>;</span><br><span class="line">&#125;;</span><br><span class="line">let <span class="built_in">na</span><span class="symbol">me1:Na</span>meType = &#123;<span class="built_in">na</span><span class="symbol">me:</span>'langpz'&#125;</span><br></pre></td></tr></table></figure></div><p>可以通过在泛型 T 参数后面加上 = 符号和默认值来实现。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是泛型？&quot;&gt;&lt;a href=&quot;#什么是泛型？&quot; class=&quot;headerlink&quot; title=&quot;什么是泛型？&quot;&gt;&lt;/a&gt;什么是泛型？&lt;/h1&gt;&lt;p&gt;泛型是一种参数化类型的概念，允许我们在定义函数、类、接口等时使用类型变量来表示未知的具体类型。通过泛型，我们可以编写出更通用的代码，从而提高代码的复用性和可读性。在 TypeScript 中，泛型以&lt;t&gt;的形式表示，其中 T 可以是任何标识符，常用于表示类型参数。&lt;br&gt;
    
    </summary>
    
    
      <category term="TypeScript" scheme="http://blog.langpz.com/tags/TypeScript/"/>
    
      <category term="泛型" scheme="http://blog.langpz.com/tags/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>解决github拉取推送代码报错:ssh: connect to host github.com port 22: Connection timed out</title>
    <link href="http://blog.langpz.com/%E8%A7%A3%E5%86%B3github%E6%8B%89%E5%8F%96%E6%8E%A8%E9%80%81%E4%BB%A3%E7%A0%81%E6%8A%A5%E9%94%99-ssh-connect-to-host-github-com-port-22-Connection-timed-out.html"/>
    <id>http://blog.langpz.com/解决github拉取推送代码报错-ssh-connect-to-host-github-com-port-22-Connection-timed-out.html</id>
    <published>2024-01-20T18:49:52.000Z</published>
    <updated>2025-09-06T12:42:50.054Z</updated>
    
    <content type="html"><![CDATA[<h1 id="github拉代码报错"><a href="#github拉代码报错" class="headerlink" title="github拉代码报错"></a>github拉代码报错</h1><p>ssh: connect to host github.com port 22: Connection timed out<br><a id="more"></a><br>Windows 找到用户/.ssh/config 文件<br>macOS ~/.ssh/config<br>没有config文件就创建一个<br></p><div class="highlight-wrap" data-rel="Routeros"><figure class="lpz highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  Hostname ssh.github.com</span><br><span class="line"> <span class="built_in"> Port </span>443</span><br></pre></td></tr></table></figure></div><p></p><p>重新拉取或提交代码，就可以正常使用了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;github拉代码报错&quot;&gt;&lt;a href=&quot;#github拉代码报错&quot; class=&quot;headerlink&quot; title=&quot;github拉代码报错&quot;&gt;&lt;/a&gt;github拉代码报错&lt;/h1&gt;&lt;p&gt;ssh: connect to host github.com port 22: Connection timed out&lt;br&gt;
    
    </summary>
    
    
      <category term="github" scheme="http://blog.langpz.com/tags/github/"/>
    
  </entry>
  
</feed>
